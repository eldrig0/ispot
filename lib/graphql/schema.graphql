"""Anything"""
scalar _Any

union _Entity = Address | User | Group | ServiceAccount | App | ProductVariant | Product | ProductType | Collection | Category | ProductImage

type _Service {
  sdl: String
}

"""Create a new address for the customer."""
type AccountAddressCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance for which the address was created."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""Delete an address of the logged-in user."""
type AccountAddressDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance for which the address was deleted."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""Updates an address of the logged-in user."""
type AccountAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user object for which the address was edited."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""Remove user account."""
type AccountDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type AccountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!
}

"""An enumeration."""
enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_SERVICE_ACCOUNT
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
}

input AccountInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput
}

"""Register a new user."""
type AccountRegister {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Informs whether users need to confirm their email address."""
  requiresConfirmation: Boolean
  accountErrors: [AccountError!]!
  user: User
}

input AccountRegisterInput {
  """The email address of the user."""
  email: String!

  """Password."""
  password: String!

  """Base of frontend URL that will be needed to create confirmation URL."""
  redirectUrl: String
}

"""Sends an email with the account removal link for the logged-in user."""
type AccountRequestDeletion {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

"""Sets a default address for the authenticated user."""
type AccountSetDefaultAddress {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]!
}

"""Updates the account of the logged-in user."""
type AccountUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""Updates metadata of the logged-in user."""
type AccountUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""Represents user address data."""
type Address implements Node {
  """The ID of the object."""
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!

  """Shop's default country."""
  country: CountryDisplay!
  countryArea: String!
  phone: String

  """Address is user's default shipping address."""
  isDefaultShippingAddress: Boolean

  """Address is user's default billing address."""
  isDefaultBillingAddress: Boolean
}

"""Creates user address."""
type AddressCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance for which the address was created."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""Deletes an address."""
type AddressDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance for which the address was deleted."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

input AddressInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """Company or organization."""
  companyName: String

  """Address."""
  streetAddress1: String

  """Address."""
  streetAddress2: String

  """City."""
  city: String

  """District."""
  cityArea: String

  """Postal code."""
  postalCode: String

  """Country."""
  country: CountryCode

  """State or province."""
  countryArea: String

  """Phone number."""
  phone: String
}

"""Sets a default address for the given user."""
type AddressSetDefault {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]!
}

"""An enumeration."""
enum AddressTypeEnum {
  BILLING
  SHIPPING
}

"""Updates an address."""
type AddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user object for which the address was edited."""
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String]
  requiredFields: [String]
  upperFields: [String]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue]
  cityType: String
  cityChoices: [ChoiceValue]
  cityAreaType: String
  cityAreaChoices: [ChoiceValue]
  postalCodeType: String
  postalCodeMatchers: [String]
  postalCodeExamples: [String]
  postalCodePrefix: String
}

"""Represents app data."""
type App implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """Name of the app."""
  name: String

  """The date and time when the app was created."""
  created: DateTime

  """Determine if app will be set active or not."""
  isActive: Boolean

  """List of the app's permissions."""
  permissions: [Permission]

  """Last 4 characters of the tokens."""
  tokens: [AppToken]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of webhooks assigned to this app."""
  webhooks: [Webhook]
}

type AppCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AppCountableEdge {
  """The item at the end of the edge."""
  node: App!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new app."""
type AppCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The newly created authentication token."""
  authToken: String
  appErrors: [AppError!]!
  app: App
}

"""Deletes an app."""
type AppDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

type AppError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AppErrorCode!

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]
}

"""An enumeration."""
enum AppErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

input AppFilterInput {
  search: String
  isActive: Boolean
}

input AppInput {
  """Name of the app."""
  name: String

  """Determine if this app should be enabled."""
  isActive: Boolean

  """List of permission code names to assign to this app."""
  permissions: [PermissionEnum]
}

enum AppSortField {
  """Sort apps by name."""
  NAME

  """Sort apps by creation date."""
  CREATION_DATE
}

input AppSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort apps by the selected field."""
  field: AppSortField!
}

"""Represents token data."""
type AppToken implements Node {
  """Name of the authenticated token."""
  name: String

  """Last 4 characters of the token."""
  authToken: String

  """The ID of the object."""
  id: ID!
}

"""Creates a new token."""
type AppTokenCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The newly created authentication token."""
  authToken: String
  appErrors: [AppError!]!
  appToken: AppToken
}

"""Deletes an authentication token assigned to app."""
type AppTokenDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  appToken: AppToken
}

input AppTokenInput {
  """Name of the token."""
  name: String

  """ID of app."""
  app: ID!
}

"""Updates an existing app."""
type AppUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

"""Assigns storefront's navigation menus."""
type AssignNavigation {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Assigned navigation menu."""
  menu: Menu
  menuErrors: [MenuError!]!
}

"""
Custom attribute of a product. Attributes can be assigned to products and variants at the product type level.
"""
type Attribute implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  productTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  productVariantTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum

  """Name of an attribute displayed in the interface."""
  name: String

  """Internal representation of an attribute name."""
  slug: String

  """List of attribute's values."""
  values: [AttributeValue]

  """Whether the attribute requires values to be passed or not."""
  valueRequired: Boolean!

  """Whether the attribute should be visible or not in storefront."""
  visibleInStorefront: Boolean!

  """Whether the attribute can be filtered in storefront."""
  filterableInStorefront: Boolean!

  """Whether the attribute can be filtered in dashboard."""
  filterableInDashboard: Boolean!

  """Whether the attribute can be displayed in the admin product list."""
  availableInGrid: Boolean!

  """Returns translated attribute fields for the given language code."""
  translation(
    """A language code to return the translation for attribute."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslation

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int!
}

"""Assign attributes to a given product type."""
type AttributeAssign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The updated product type."""
  productType: ProductType
  productErrors: [ProductAttributeError!]!
}

input AttributeAssignInput {
  """The ID of the attribute to assign."""
  id: ID!

  """The attribute type to be assigned as."""
  type: AttributeTypeEnum!
}

"""Deletes attributes."""
type AttributeBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata item for attribute."""
type AttributeClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

"""Clears public metadata item for attribute."""
type AttributeClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

type AttributeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type AttributeCountableEdge {
  """The item at the end of the edge."""
  node: Attribute!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates an attribute."""
type AttributeCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeCreateInput {
  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum

  """Name of an attribute displayed in the interface."""
  name: String!

  """Internal representation of an attribute name."""
  slug: String

  """List of attribute's values."""
  values: [AttributeValueCreateInput]

  """Whether the attribute requires values to be passed or not."""
  valueRequired: Boolean

  """Whether the attribute is for variants only."""
  isVariantOnly: Boolean

  """Whether the attribute should be visible or not in storefront."""
  visibleInStorefront: Boolean

  """Whether the attribute can be filtered in storefront."""
  filterableInStorefront: Boolean

  """Whether the attribute can be filtered in dashboard."""
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """Whether the attribute can be displayed in the admin product list."""
  availableInGrid: Boolean
}

"""Deletes an attribute."""
type AttributeDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  search: String
  ids: [ID]
  inCollection: ID
  inCategory: ID
}

input AttributeInput {
  """Internal representation of an attribute name."""
  slug: String!

  """
  [Deprecated] Internal representation of a value (unique per attribute). This field will be removed after 2020-07-31.
  """
  value: String

  """Internal representation of a value (unique per attribute)."""
  values: [String]
}

"""An enumeration."""
enum AttributeInputTypeEnum {
  DROPDOWN
  MULTISELECT
}

"""Reorder the values of an attribute."""
type AttributeReorderValues {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Attribute from which values are reordered."""
  attribute: Attribute
  productErrors: [ProductError!]!
}

enum AttributeSortField {
  """Sort attributes by name"""
  NAME

  """Sort attributes by slug"""
  SLUG

  """Sort attributes by the value required flag"""
  VALUE_REQUIRED

  """Sort attributes by the variant only flag"""
  IS_VARIANT_ONLY

  """Sort attributes by visibility in the storefront"""
  VISIBLE_IN_STOREFRONT

  """Sort attributes by the filterable in storefront flag"""
  FILTERABLE_IN_STOREFRONT

  """Sort attributes by the filterable in dashboard flag"""
  FILTERABLE_IN_DASHBOARD

  """Sort attributes by their position in storefront"""
  STOREFRONT_SEARCH_POSITION

  """
  Sort attributes based on whether they can be displayed or not in a product grid.
  """
  AVAILABLE_IN_GRID
}

input AttributeSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort attributes by the selected field."""
  field: AttributeSortField!
}

type AttributeTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated attribute fields for the given language code."""
  translation(
    """A language code to return the translation for attribute."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslation

  """Custom attribute of a product."""
  attribute: Attribute
}

"""Creates/Updates translations for attribute."""
type AttributeTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  attribute: Attribute
}

type AttributeTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Translation language."""
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  PRODUCT
  VARIANT
}

"""Un-assign attributes from a given product type."""
type AttributeUnassign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The updated product type."""
  productType: ProductType
  productErrors: [ProductError!]!
}

"""Updates attribute."""
type AttributeUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeUpdateInput {
  """Name of an attribute displayed in the interface."""
  name: String

  """Internal representation of an attribute name."""
  slug: String

  """IDs of values to be removed from this attribute."""
  removeValues: [ID]

  """New values to be created for this attribute."""
  addValues: [AttributeValueCreateInput]

  """Whether the attribute requires values to be passed or not."""
  valueRequired: Boolean

  """Whether the attribute is for variants only."""
  isVariantOnly: Boolean

  """Whether the attribute should be visible or not in storefront."""
  visibleInStorefront: Boolean

  """Whether the attribute can be filtered in storefront."""
  filterableInStorefront: Boolean

  """Whether the attribute can be filtered in dashboard."""
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """Whether the attribute can be displayed in the admin product list."""
  availableInGrid: Boolean
}

"""Update public metadata for attribute."""
type AttributeUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

"""Update public metadata for attribute."""
type AttributeUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

"""Represents a value of an attribute."""
type AttributeValue implements Node {
  """The ID of the object."""
  id: ID!

  """Name of a value displayed in the interface."""
  name: String

  """Internal representation of a value (unique per attribute)."""
  slug: String

  """Type of value (used only when `value` field is set)."""
  type: AttributeValueType

  """Returns translated attribute value fields for the given language code."""
  translation(
    """A language code to return the translation for attribute value."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslation

  """The input type to use for entering attribute values in the dashboard."""
  inputType: AttributeInputTypeEnum
}

"""Deletes values of attributes."""
type AttributeValueBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Creates a value for an attribute."""
type AttributeValueCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The updated attribute."""
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueCreateInput {
  """Name of a value displayed in the interface."""
  name: String!
}

"""Deletes a value of an attribute."""
type AttributeValueDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The updated attribute."""
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueInput {
  """ID of the selected attribute."""
  id: ID

  """
  The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created.
  """
  values: [String]!
}

type AttributeValueTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated attribute value fields for the given language code."""
  translation(
    """A language code to return the translation for attribute value."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslation

  """Represents a value of an attribute."""
  attributeValue: AttributeValue
}

"""Creates/Updates translations for attribute value."""
type AttributeValueTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  attributeValue: AttributeValue
}

type AttributeValueTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Translation language."""
  language: LanguageDisplay!
}

enum AttributeValueType {
  COLOR
  GRADIENT
  URL
  STRING
}

"""Updates value of an attribute."""
type AttributeValueUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The updated attribute."""
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

type AuthorizationKey {
  """Name of the authorization backend."""
  name: AuthorizationKeyType!

  """Authorization key (client ID)."""
  key: String!
}

"""Adds an authorization key."""
type AuthorizationKeyAdd {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Newly added authorization key."""
  authorizationKey: AuthorizationKey

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

"""Deletes an authorization key."""
type AuthorizationKeyDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Authorization key that was deleted."""
  authorizationKey: AuthorizationKey

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

input AuthorizationKeyInput {
  """Client authorization key (client ID)."""
  key: String!

  """Client secret."""
  password: String!
}

"""An enumeration."""
enum AuthorizationKeyType {
  FACEBOOK
  GOOGLE_OAUTH2
}

type BulkProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """Index of an input list item that caused the error."""
  index: Int

  """List of warehouse IDs which causes the error."""
  warehouses: [ID!]
}

type BulkStockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """Index of an input list item that caused the error."""
  index: Int
}

input CatalogueInput {
  """Products related to the discount."""
  products: [ID]

  """Categories related to the discount."""
  categories: [ID]

  """Collections related to the discount."""
  collections: [ID]
}

"""
Represents a single category of products. Categories allow to organize products
in a tree-hierarchies which can be used for navigation in the storefront.
"""
type Category implements Node & ObjectWithMetadata {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!
  slug: String!
  parent: Category
  level: Int!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of ancestors of the category."""
  ancestors(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """List of products in the category."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """The storefront's URL for the category."""
  url: String @deprecated(reason: "This field will be removed after 2020-07-31.")

  """List of children of the category."""
  children(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image

  """Returns translated category fields for the given language code."""
  translation(
    """A language code to return the translation for category."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslation
}

"""Deletes categories."""
type CategoryBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata for category."""
type CategoryClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

"""Clears private metadata for category."""
type CategoryClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CategoryCountableEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new category."""
type CategoryCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

"""Deletes a category."""
type CategoryDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

input CategoryFilterInput {
  search: String
  ids: [ID]
}

input CategoryInput {
  """Category description (HTML/text)."""
  description: String

  """Category description (JSON)."""
  descriptionJson: JSONString

  """Category name."""
  name: String

  """Category slug."""
  slug: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String
}

enum CategorySortField {
  """Sort categories by name."""
  NAME

  """Sort categories by product count."""
  PRODUCT_COUNT

  """Sort categories by subcategory count."""
  SUBCATEGORY_COUNT
}

input CategorySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort categories by the selected field."""
  field: CategorySortField!
}

type CategoryTranslatableContent implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Returns translated category fields for the given language code."""
  translation(
    """A language code to return the translation for category."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslation

  """Represents a single category of products."""
  category: Category
}

"""Creates/Updates translations for Category."""
type CategoryTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  category: Category
}

type CategoryTranslation implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Translation language."""
  language: LanguageDisplay!
}

"""Updates a category."""
type CategoryUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

"""Update public metadata for category."""
type CategoryUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

"""Update private metadata for category."""
type CategoryUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

"""Checkout object."""
type Checkout implements Node & ObjectWithMetadata {
  created: DateTime!
  lastChange: DateTime!
  user: User
  token: UUID!
  quantity: Int!
  billingAddress: Address
  shippingAddress: Address
  shippingMethod: ShippingMethod
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String

  """List of gift cards associated with this checkout."""
  giftCards: [GiftCard]

  """The ID of the object."""
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """Shipping methods that can be used with this order."""
  availableShippingMethods: [ShippingMethod]!

  """List of available payment gateways."""
  availablePaymentGateways: [PaymentGateway!]!

  """Email of a customer."""
  email: String!

  """Returns True, if checkout requires shipping."""
  isShippingRequired: Boolean!

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLine]

  """The price of the shipping, with all the taxes included."""
  shippingPrice: TaxedMoney

  """The price of the checkout before shipping, with taxes included."""
  subtotalPrice: TaxedMoney

  """
  The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included.
  """
  totalPrice: TaxedMoney
}

"""Adds a gift card or a voucher to a checkout."""
type CheckoutAddPromoCode {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The checkout with the added gift card or voucher."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Update billing address in the existing checkout."""
type CheckoutBillingAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Clear metadata for checkout."""
type CheckoutClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""Clear private metadata for checkout."""
type CheckoutClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""
Completes the checkout. As a result a new order is created and a payment charge
is made. This action requires a successful payment before it can be performed.
In case additional confirmation step as 3D secure is required confirmationNeeded
flag will be set to True and no order created until payment is confirmed with
second call of this mutation.
"""
type CheckoutComplete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Placed order."""
  order: Order

  """
  Set to true if payment needs to be confirmed before checkout is complete.
  """
  confirmationNeeded: Boolean!
  checkoutErrors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutCountableEdge {
  """The item at the end of the edge."""
  node: Checkout!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Create a new checkout."""
type CheckoutCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """
  Whether the checkout was created or the current active one was returned. Refer
  to checkoutLinesAdd and checkoutLinesUpdate to merge a cart with an active checkout.
  """
  created: Boolean
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLineInput]!

  """The customer's email address."""
  email: String

  """
  The mailing address to where the checkout will be shipped. Note: the address
  will be ignored if the checkout doesn't contain shippable items.
  """
  shippingAddress: AddressInput

  """Billing address of the customer."""
  billingAddress: AddressInput
}

"""Sets the customer as the owner of the checkout."""
type CheckoutCustomerAttach {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Removes the user assigned as the owner of the checkout."""
type CheckoutCustomerDetach {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Updates email address in the existing checkout object."""
type CheckoutEmailUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CheckoutErrorCode!
}

"""An enumeration."""
enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  ZERO_QUANTITY
}

"""Represents an item in the checkout."""
type CheckoutLine implements Node {
  """The ID of the object."""
  id: ID!
  variant: ProductVariant!
  quantity: Int!

  """The sum of the checkout line price, taxes and discounts."""
  totalPrice: TaxedMoney

  """Indicates whether the item need to be delivered."""
  requiresShipping: Boolean
}

type CheckoutLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutLineCountableEdge {
  """The item at the end of the edge."""
  node: CheckoutLine!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Deletes a CheckoutLine."""
type CheckoutLineDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

input CheckoutLineInput {
  """The number of items purchased."""
  quantity: Int!

  """ID of the product variant."""
  variantId: ID!
}

"""Adds a checkout line to the existing checkout."""
type CheckoutLinesAdd {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Updates checkout line in the existing checkout."""
type CheckoutLinesUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Create a new payment for given checkout."""
type CheckoutPaymentCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Related checkout object."""
  checkout: Checkout

  """A newly created payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""Remove a gift card or a voucher from a checkout."""
type CheckoutRemovePromoCode {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The checkout with the removed gift card or voucher."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Update shipping address in the existing checkout."""
type CheckoutShippingAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Updates the shipping address of the checkout."""
type CheckoutShippingMethodUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Updates metadata for checkout."""
type CheckoutUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""Updates private metadata for checkout."""
type CheckoutUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

type ChoiceValue {
  raw: String
  verbose: String
}

"""Represents a collection of products."""
type Collection implements Node & ObjectWithMetadata {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!
  publicationDate: Date
  isPublished: Boolean!
  slug: String!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of products in this collection."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image

  """Returns translated collection fields for the given language code."""
  translation(
    """A language code to return the translation for collection."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslation
}

"""Adds products to a collection."""
type CollectionAddProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Collection to which products will be added."""
  collection: Collection
  productErrors: [ProductError!]!
}

"""Deletes collections."""
type CollectionBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Publish collections."""
type CollectionBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata for collection."""
type CollectionClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

"""Clears private metadata item for collection."""
type CollectionClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

type CollectionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CollectionCountableEdge {
  """The item at the end of the edge."""
  node: Collection!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new collection."""
type CollectionCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionCreateInput {
  """Informs whether a collection is published."""
  isPublished: Boolean

  """Name of the collection."""
  name: String

  """Slug of the collection."""
  slug: String

  """Description of the collection (HTML/text)."""
  description: String

  """Description of the collection (JSON)."""
  descriptionJson: JSONString

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Publication date. ISO 8601 standard."""
  publicationDate: Date

  """List of products to be added to the collection."""
  products: [ID]
}

"""Deletes a collection."""
type CollectionDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionFilterInput {
  published: CollectionPublished
  search: String
  ids: [ID]
}

input CollectionInput {
  """Informs whether a collection is published."""
  isPublished: Boolean

  """Name of the collection."""
  name: String

  """Slug of the collection."""
  slug: String

  """Description of the collection (HTML/text)."""
  description: String

  """Description of the collection (JSON)."""
  descriptionJson: JSONString

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Publication date. ISO 8601 standard."""
  publicationDate: Date
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

"""Remove products from a collection."""
type CollectionRemoveProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Collection from which products will be removed."""
  collection: Collection
  productErrors: [ProductError!]!
}

"""Reorder the products of a collection."""
type CollectionReorderProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Collection from which products are reordered."""
  collection: Collection
  productErrors: [ProductError!]!
}

enum CollectionSortField {
  """Sort collections by name."""
  NAME

  """Sort collections by availability."""
  AVAILABILITY

  """Sort collections by product count."""
  PRODUCT_COUNT
}

input CollectionSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort collections by the selected field."""
  field: CollectionSortField!
}

type CollectionTranslatableContent implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Returns translated collection fields for the given language code."""
  translation(
    """A language code to return the translation for collection."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslation

  """Represents a collection of products."""
  collection: Collection
}

"""Creates/Updates translations for collection."""
type CollectionTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  collection: Collection
}

type CollectionTranslation implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Translation language."""
  language: LanguageDisplay!
}

"""Updates a collection."""
type CollectionUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

"""Update public metadata for collection."""
type CollectionUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

"""Update private metadata for collection."""
type CollectionUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

"""Stores information about a single configuration field."""
type ConfigurationItem {
  """Name of the field."""
  name: String!

  """Current value of the field."""
  value: String

  """Type of the field."""
  type: ConfigurationTypeFieldEnum

  """Help text for the field."""
  helpText: String

  """Label for the field."""
  label: String
}

input ConfigurationItemInput {
  """Name of the field to update."""
  name: String!

  """Value of the given field to update."""
  value: String
}

"""An enumeration."""
enum ConfigurationTypeFieldEnum {
  STRING
  BOOLEAN
  SECRET
  PASSWORD
}

"""Confirm user account with token sent by email during registration."""
type ConfirmAccount {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An activated user account."""
  user: User
  accountErrors: [AccountError!]!
}

"""Confirm the email change of the logged-in user."""
type ConfirmEmailChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance with a new email."""
  user: User
  accountErrors: [AccountError!]!
}

"""An enumeration."""
enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type CountryDisplay {
  """Country code."""
  code: String!

  """Country name."""
  country: String!

  """Country tax."""
  vat: VAT
}

"""
Mutation that authenticates a user and returns token and user data.

It overrides the default graphql_jwt.ObtainJSONWebToken to wrap potential
authentication errors in our Error type, which is consistent to how the rest of
the mutation works.
"""
type CreateToken {
  token: String
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """List of errors that occurred executing the mutation."""
  accountErrors: [AccountError!]!

  """A user instance."""
  user: User
}

type CreditCard {
  """Card brand."""
  brand: String!

  """The host name of the domain."""
  firstDigits: String!

  """Last 4 digits of the card number."""
  lastDigits: String!

  """Two-digit number representing the card’s expiration month."""
  expMonth: Int!

  """Four-digit number representing the card’s expiration year."""
  expYear: Int!
}

"""Deletes customers."""
type CustomerBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  accountErrors: [AccountError!]!
}

"""Creates a new customer."""
type CustomerCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""Deletes a customer."""
type CustomerDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""History log of the customer."""
type CustomerEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Customer event type."""
  type: CustomerEventsEnum

  """User who performed the action."""
  user: User

  """Content of the event."""
  message: String

  """Number of objects concerned by the event."""
  count: Int

  """The concerned order."""
  order: Order

  """The concerned order line."""
  orderLine: OrderLine
}

"""An enumeration."""
enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  moneySpent: PriceRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput
  search: String
}

input CustomerInput {
  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput

  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String
}

"""Updates an existing customer."""
type CustomerUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

input DateRangeInput {
  """Start date."""
  gte: Date

  """End date."""
  lte: Date
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DateTimeRangeInput {
  """Start date."""
  gte: DateTime

  """End date."""
  lte: DateTime
}

"""
Custom Decimal implementation.

Returns Decimal as a float in the API,
parses float to the Decimal on the way back.
"""
scalar Decimal

"""Delete metadata of an object."""
type DeleteMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""Delete object's private metadata."""
type DeletePrivateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

type DigitalContent implements Node & ObjectWithMetadata {
  useDefaultSettings: Boolean!
  automaticFulfillment: Boolean!
  productVariant: ProductVariant!
  contentFile: String!
  maxDownloads: Int
  urlValidDays: Int

  """List of URLs for the digital variant."""
  urls: [DigitalContentUrl]

  """The ID of the object."""
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type DigitalContentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DigitalContentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DigitalContentCountableEdge {
  """The item at the end of the edge."""
  node: DigitalContent!

  """A cursor for use in pagination."""
  cursor: String!
}

"""
Create new digital content. This mutation must be sent as a `multipart` request.
More detailed specs of the upload format can be found here:
https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type DigitalContentCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

"""Remove digital content assigned to given variant."""
type DigitalContentDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  productErrors: [ProductError!]!
}

input DigitalContentInput {
  """Use default digital content settings for this product."""
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """Overwrite default automatic_fulfillment setting for variant."""
  automaticFulfillment: Boolean
}

"""Update digital content."""
type DigitalContentUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

input DigitalContentUploadInput {
  """Use default digital content settings for this product."""
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """Overwrite default automatic_fulfillment setting for variant."""
  automaticFulfillment: Boolean

  """Represents an file in a multipart request."""
  contentFile: Upload!
}

type DigitalContentUrl implements Node {
  token: UUID!
  content: DigitalContent!
  created: DateTime!
  downloadNum: Int!

  """The ID of the object."""
  id: ID!

  """URL for digital content."""
  url: String
}

"""Generate new URL to digital content."""
type DigitalContentUrlCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  digitalContentUrl: DigitalContentUrl
}

input DigitalContentUrlCreateInput {
  """Digital content ID which URL will belong to."""
  content: ID!
}

type DiscountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: DiscountErrorCode!
}

"""An enumeration."""
enum DiscountErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

"""Represents shop's domain."""
type Domain {
  """The host name of the domain."""
  host: String!

  """Inform if SSL is enabled."""
  sslEnabled: Boolean!

  """Shop's absolute URL."""
  url: String!
}

"""Deletes draft orders."""
type DraftOrderBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]!
}

"""Completes creating an order."""
type DraftOrderComplete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Completed order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Creates a new draft order."""
type DraftOrderCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  """Billing address of the customer."""
  billingAddress: AddressInput
  user: ID

  """Email address of the customer."""
  userEmail: String

  """Discount amount for the order."""
  discount: Decimal

  """Shipping address of the customer."""
  shippingAddress: AddressInput

  """ID of a selected shipping method."""
  shippingMethod: ID

  """ID of the voucher associated with the order."""
  voucher: ID

  """A note from a customer. Visible by customers in the order summary."""
  customerNote: String

  """Variant line input consisting of variant ID and quantity of products."""
  lines: [OrderLineCreateInput]
}

"""Deletes a draft order."""
type DraftOrderDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderInput {
  """Billing address of the customer."""
  billingAddress: AddressInput
  user: ID

  """Email address of the customer."""
  userEmail: String

  """Discount amount for the order."""
  discount: Decimal

  """Shipping address of the customer."""
  shippingAddress: AddressInput

  """ID of a selected shipping method."""
  shippingMethod: ID

  """ID of the voucher associated with the order."""
  voucher: ID

  """A note from a customer. Visible by customers in the order summary."""
  customerNote: String
}

"""Deletes an order line from a draft order."""
type DraftOrderLineDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A related draft order."""
  order: Order

  """An order line that was deleted."""
  orderLine: OrderLine
  orderErrors: [OrderError!]!
}

"""Deletes order lines."""
type DraftOrderLinesBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]!
}

"""Create order lines for a draft order."""
type DraftOrderLinesCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A related draft order."""
  order: Order

  """List of newly added order lines."""
  orderLines: [OrderLine!]
  orderErrors: [OrderError!]!
}

"""Updates an order line of a draft order."""
type DraftOrderLineUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A related draft order."""
  order: Order
  orderErrors: [OrderError!]!
  orderLine: OrderLine
}

"""Updates a draft order."""
type DraftOrderUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

"""Represents an error in the input of a mutation."""
type Error {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String
}

"""Represents order fulfillment."""
type Fulfillment implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  fulfillmentOrder: Int!
  status: FulfillmentStatus!
  trackingNumber: String!
  created: DateTime!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of lines for the fulfillment."""
  lines: [FulfillmentLine]

  """User-friendly fulfillment status."""
  statusDisplay: String

  """Warehouse from fulfillment was fulfilled."""
  warehouse: Warehouse
}

"""Cancels existing fulfillment and optionally restocks items."""
type FulfillmentCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A canceled fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment was cancelled."""
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentCancelInput {
  """ID of warehouse where items will be restock."""
  warehouseId: ID!
}

"""Clears metadata for fulfillment."""
type FulfillmentClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

"""Clears private metadata for fulfillment."""
type FulfillmentClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

"""Represents line of the fulfillment."""
type FulfillmentLine implements Node {
  """The ID of the object."""
  id: ID!
  quantity: Int!
  orderLine: OrderLine
}

"""An enumeration."""
enum FulfillmentStatus {
  """Fulfilled"""
  FULFILLED

  """Canceled"""
  CANCELED
}

"""Updates metadata for fulfillment."""
type FulfillmentUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

"""Updates metadata for fulfillment."""
type FulfillmentUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

"""Updates a fulfillment for an order."""
type FulfillmentUpdateTracking {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A fulfillment with updated tracking."""
  fulfillment: Fulfillment

  """Order for which fulfillment was updated."""
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentUpdateTrackingInput {
  """Fulfillment tracking number."""
  trackingNumber: String

  """If true, send an email notification to the customer."""
  notifyCustomer: Boolean = false
}

"""Payment gateway client configuration key and value pair."""
type GatewayConfigLine {
  """Gateway config key."""
  field: String!

  """Gateway config value for key."""
  value: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""Represents customers's geolocalization data."""
type Geolocalization {
  """Country of the user acquired by his IP address."""
  country: CountryDisplay
}

"""
A gift card is a prepaid electronic payment card accepted in stores. They can be
used during checkout by providing a valid gift card codes.
"""
type GiftCard implements Node {
  """Gift card code."""
  code: String

  """The customer who bought a gift card."""
  user: User
  created: DateTime!
  startDate: Date!
  endDate: Date
  lastUsedOn: DateTime
  isActive: Boolean!
  initialBalance: Money
  currentBalance: Money

  """The ID of the object."""
  id: ID!

  """Code in format which allows displaying in a user interface."""
  displayCode: String
}

"""Activate a gift card."""
type GiftCardActivate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A gift card to activate."""
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]!
}

type GiftCardCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GiftCardCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GiftCardCountableEdge {
  """The item at the end of the edge."""
  node: GiftCard!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new gift card."""
type GiftCardCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCardErrors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardCreateInput {
  """Start date of the gift card in ISO 8601 format."""
  startDate: Date

  """End date of the gift card in ISO 8601 format."""
  endDate: Date

  """Value of the gift card."""
  balance: Decimal

  """The customer's email of the gift card buyer."""
  userEmail: String

  """Code to use the gift card."""
  code: String
}

"""Deactivate a gift card."""
type GiftCardDeactivate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A gift card to deactivate."""
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]!
}

type GiftCardError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: GiftCardErrorCode!
}

"""An enumeration."""
enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Update a gift card."""
type GiftCardUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCardErrors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardUpdateInput {
  """Start date of the gift card in ISO 8601 format."""
  startDate: Date

  """End date of the gift card in ISO 8601 format."""
  endDate: Date

  """Value of the gift card."""
  balance: Decimal

  """The customer's email of the gift card buyer."""
  userEmail: String
}

"""Represents permission group data."""
type Group implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """List of group permissions"""
  permissions: [Permission]

  """List of group users"""
  users: [User]

  """
  True, if the currently authenticated user has rights to manage a group.
  """
  userCanManage: Boolean!
}

type GroupCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GroupCountableEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Updates homepage collection of the shop."""
type HomepageCollectionUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

"""Represents an image."""
type Image {
  """The URL of the image."""
  url: String!

  """Alt text for an image."""
  alt: String
}

input IntRangeInput {
  """Value greater than or equal to."""
  gte: Int

  """Value less than or equal to."""
  lte: Int
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""An enumeration."""
enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KO
  LT
  MN
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type LanguageDisplay {
  """ISO 639 representation of the language name."""
  code: LanguageCodeEnum!

  """Full name of the language."""
  language: String!
}

type Margin {
  start: Int
  stop: Int
}

"""
Represents a single menu - an object that is used to help navigate through the store.
"""
type Menu implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  items: [MenuItem]
}

"""Deletes menus."""
type MenuBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  menuErrors: [MenuError!]!
}

type MenuCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MenuCountableEdge {
  """The item at the end of the edge."""
  node: Menu!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new Menu."""
type MenuCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

input MenuCreateInput {
  """Name of the menu."""
  name: String!

  """List of menu items."""
  items: [MenuItemInput]
}

"""Deletes a menu."""
type MenuDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

type MenuError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: MenuErrorCode!
}

"""An enumeration."""
enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

input MenuFilterInput {
  search: String
}

input MenuInput {
  """Name of the menu."""
  name: String
}

"""
Represents a single item of the related menu. Can store categories, collection or pages.
"""
type MenuItem implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  menu: Menu!
  parent: MenuItem
  category: Category
  collection: Collection
  page: Page
  level: Int!
  children: [MenuItem]

  """URL to the menu item."""
  url: String

  """Returns translated menu item fields for the given language code."""
  translation(
    """A language code to return the translation for menu item."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslation
}

"""Deletes menu items."""
type MenuItemBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  menuErrors: [MenuError!]!
}

type MenuItemCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type MenuItemCountableEdge {
  """The item at the end of the edge."""
  node: MenuItem!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new menu item."""
type MenuItemCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemCreateInput {
  """Name of the menu item."""
  name: String!

  """URL of the pointed item."""
  url: String

  """Category to which item points."""
  category: ID

  """Collection to which item points."""
  collection: ID

  """Page to which item points."""
  page: ID

  """Menu to which item belongs."""
  menu: ID!

  """ID of the parent menu. If empty, menu will be top level menu."""
  parent: ID
}

"""Deletes a menu item."""
type MenuItemDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemFilterInput {
  search: String
}

input MenuItemInput {
  """Name of the menu item."""
  name: String

  """URL of the pointed item."""
  url: String

  """Category to which item points."""
  category: ID

  """Collection to which item points."""
  collection: ID

  """Page to which item points."""
  page: ID
}

"""Moves items of menus."""
type MenuItemMove {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Assigned menu to move within."""
  menu: Menu
  menuErrors: [MenuError!]!
}

input MenuItemMoveInput {
  """The menu item ID to move."""
  itemId: ID!

  """ID of the parent menu. If empty, menu will be top level menu."""
  parentId: ID

  """Sorting position of the menu item (from 0 to x)."""
  sortOrder: Int
}

input MenuItemSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort menu items by the selected field."""
  field: MenuItemsSortField!
}

enum MenuItemsSortField {
  """Sort menu items by name."""
  NAME
}

type MenuItemTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated menu item fields for the given language code."""
  translation(
    """A language code to return the translation for menu item."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslation

  """
  Represents a single item of the related menu. Can store categories, collection or pages.
  """
  menuItem: MenuItem
}

"""Creates/Updates translations for Menu Item."""
type MenuItemTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  menuItem: MenuItem
}

type MenuItemTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Translation language."""
  language: LanguageDisplay!
}

"""Updates a menu item."""
type MenuItemUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

enum MenuSortField {
  """Sort menus by name."""
  NAME

  """Sort menus by items count."""
  ITEMS_COUNT
}

input MenuSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort menus by the selected field."""
  field: MenuSortField!
}

"""Updates a menu."""
type MenuUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

type MetaClientStore {
  """Metadata client's name."""
  name: String!

  """Metadata stored for a client."""
  metadata: [MetaItem]!
}

type MetadataError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: MetadataErrorCode!
}

"""An enumeration."""
enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
}

input MetadataInput {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

type MetadataItem {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

input MetaInput {
  """Name of metadata client group."""
  namespace: String!

  """Metadata client's name."""
  clientName: String!

  """Key for stored data."""
  key: String!

  """Stored metadata value."""
  value: String!
}

type MetaItem {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

input MetaPath {
  """Name of metadata client group."""
  namespace: String!

  """Metadata client's name."""
  clientName: String!

  """Key for stored data."""
  key: String!
}

type MetaStore {
  """Name of metadata client group."""
  namespace: String!

  """List of clients that stored metadata in a group."""
  clients: [MetaClientStore]!
}

"""Represents amount of money in specific currency."""
type Money {
  """Currency code."""
  currency: String!

  """Amount of money."""
  amount: Float!

  """Money formatted according to the current locale."""
  localized: String! @deprecated(reason: "Price formatting according to the current locale should be handled by the frontend client. This field will be removed after 2020-07-31.")
}

"""Represents a range of amounts of money."""
type MoneyRange {
  """Lower bound of a price range."""
  start: Money

  """Upper bound of a price range."""
  stop: Money
}

input MoveProductInput {
  """The ID of the product to move."""
  productId: ID!

  """
  The relative sorting position of the product (from -inf to +inf) starting from the first given product's actual position.
  """
  sortOrder: Int
}

type Mutation {
  """Creates a new webhook subscription."""
  webhookCreate(
    """Fields required to create a webhook."""
    input: WebhookCreateInput!
  ): WebhookCreate

  """Deletes a webhook subscription."""
  webhookDelete(
    """ID of a webhook to delete."""
    id: ID!
  ): WebhookDelete

  """Updates a webhook subscription."""
  webhookUpdate(
    """ID of a webhook to update."""
    id: ID!

    """Fields required to update a webhook."""
    input: WebhookUpdateInput!
  ): WebhookUpdate

  """Creates new warehouse."""
  createWarehouse(
    """Fields required to create warehouse."""
    input: WarehouseCreateInput!
  ): WarehouseCreate

  """Updates given warehouse."""
  updateWarehouse(
    """ID of a warehouse to update."""
    id: ID!

    """Fields required to update warehouse."""
    input: WarehouseUpdateInput!
  ): WarehouseUpdate

  """Deletes selected warehouse."""
  deleteWarehouse(
    """ID of a warehouse to delete."""
    id: ID!
  ): WarehouseDelete

  """Add shipping zone to given warehouse."""
  assignWarehouseShippingZone(
    """ID of a warehouse to update."""
    id: ID!

    """List of shipping zone IDs."""
    shippingZoneIds: [ID!]!
  ): WarehouseShippingZoneAssign

  """Remove shipping zone from given warehouse."""
  unassignWarehouseShippingZone(
    """ID of a warehouse to update."""
    id: ID!

    """List of shipping zone IDs."""
    shippingZoneIds: [ID!]!
  ): WarehouseShippingZoneUnassign

  """Adds an authorization key."""
  authorizationKeyAdd(
    """Fields required to create an authorization key."""
    input: AuthorizationKeyInput!

    """Type of an authorization key to add."""
    keyType: AuthorizationKeyType!
  ): AuthorizationKeyAdd

  """Deletes an authorization key."""
  authorizationKeyDelete(
    """Type of a key to delete."""
    keyType: AuthorizationKeyType!
  ): AuthorizationKeyDelete

  """Creates a new staff notification recipient."""
  staffNotificationRecipientCreate(
    """Fields required to create a staff notification recipient."""
    input: StaffNotificationRecipientInput!
  ): StaffNotificationRecipientCreate

  """Updates a staff notification recipient."""
  staffNotificationRecipientUpdate(
    """ID of a staff notification recipient to update."""
    id: ID!

    """Fields required to update a staff notification recipient."""
    input: StaffNotificationRecipientInput!
  ): StaffNotificationRecipientUpdate

  """Delete staff notification recipient."""
  staffNotificationRecipientDelete(
    """ID of a staff notification recipient to delete."""
    id: ID!
  ): StaffNotificationRecipientDelete

  """Updates homepage collection of the shop."""
  homepageCollectionUpdate(
    """Collection displayed on homepage."""
    collection: ID
  ): HomepageCollectionUpdate

  """Updates site domain of the shop."""
  shopDomainUpdate(
    """Fields required to update site."""
    input: SiteDomainInput
  ): ShopDomainUpdate

  """Updates shop settings."""
  shopSettingsUpdate(
    """Fields required to update shop settings."""
    input: ShopSettingsInput!
  ): ShopSettingsUpdate

  """Fetch tax rates."""
  shopFetchTaxRates: ShopFetchTaxRates

  """Creates/Updates translations for Shop Settings."""
  shopSettingsTranslate(
    """Fields required to update shop settings translations."""
    input: ShopSettingsTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ShopSettingsTranslate

  """
  Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
  """
  shopAddressUpdate(
    """Fields required to update shop address."""
    input: AddressInput
  ): ShopAddressUpdate

  """Creates a new shipping price."""
  shippingPriceCreate(
    """Fields required to create a shipping price."""
    input: ShippingPriceInput!
  ): ShippingPriceCreate

  """Deletes a shipping price."""
  shippingPriceDelete(
    """ID of a shipping price to delete."""
    id: ID!
  ): ShippingPriceDelete

  """Deletes shipping prices."""
  shippingPriceBulkDelete(
    """List of shipping price IDs to delete."""
    ids: [ID]!
  ): ShippingPriceBulkDelete

  """Updates a new shipping price."""
  shippingPriceUpdate(
    """ID of a shipping price to update."""
    id: ID!

    """Fields required to update a shipping price."""
    input: ShippingPriceInput!
  ): ShippingPriceUpdate

  """Creates/Updates translations for shipping method."""
  shippingPriceTranslate(
    """Shipping method ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ShippingPriceTranslate

  """Creates a new shipping zone."""
  shippingZoneCreate(
    """Fields required to create a shipping zone."""
    input: ShippingZoneCreateInput!
  ): ShippingZoneCreate

  """Deletes a shipping zone."""
  shippingZoneDelete(
    """ID of a shipping zone to delete."""
    id: ID!
  ): ShippingZoneDelete

  """Deletes shipping zones."""
  shippingZoneBulkDelete(
    """List of shipping zone IDs to delete."""
    ids: [ID]!
  ): ShippingZoneBulkDelete

  """Updates a new shipping zone."""
  shippingZoneUpdate(
    """ID of a shipping zone to update."""
    id: ID!

    """Fields required to update a shipping zone."""
    input: ShippingZoneUpdateInput!
  ): ShippingZoneUpdate

  """Creates an attribute."""
  attributeCreate(
    """Fields required to create an attribute."""
    input: AttributeCreateInput!
  ): AttributeCreate

  """Deletes an attribute."""
  attributeDelete(
    """ID of an attribute to delete."""
    id: ID!
  ): AttributeDelete

  """Deletes attributes."""
  attributeBulkDelete(
    """List of attribute IDs to delete."""
    ids: [ID]!
  ): AttributeBulkDelete

  """Assign attributes to a given product type."""
  attributeAssign(
    """The operations to perform."""
    operations: [AttributeAssignInput]!

    """ID of the product type to assign the attributes into."""
    productTypeId: ID!
  ): AttributeAssign

  """Un-assign attributes from a given product type."""
  attributeUnassign(
    """The IDs of the attributes to assign."""
    attributeIds: [ID]!

    """ID of the product type to assign the attributes into."""
    productTypeId: ID!
  ): AttributeUnassign

  """Updates attribute."""
  attributeUpdate(
    """ID of an attribute to update."""
    id: ID!

    """Fields required to update an attribute."""
    input: AttributeUpdateInput!
  ): AttributeUpdate

  """Creates/Updates translations for attribute."""
  attributeTranslate(
    """Attribute ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): AttributeTranslate

  """Update public metadata for attribute."""
  attributeUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): AttributeUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata item for attribute."""
  attributeClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): AttributeClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update public metadata for attribute."""
  attributeUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): AttributeUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata item for attribute."""
  attributeClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): AttributeClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Creates a value for an attribute."""
  attributeValueCreate(
    """Attribute to which value will be assigned."""
    attribute: ID!

    """Fields required to create an AttributeValue."""
    input: AttributeValueCreateInput!
  ): AttributeValueCreate

  """Deletes a value of an attribute."""
  attributeValueDelete(
    """ID of a value to delete."""
    id: ID!
  ): AttributeValueDelete

  """Deletes values of attributes."""
  attributeValueBulkDelete(
    """List of attribute value IDs to delete."""
    ids: [ID]!
  ): AttributeValueBulkDelete

  """Updates value of an attribute."""
  attributeValueUpdate(
    """ID of an AttributeValue to update."""
    id: ID!

    """Fields required to update an AttributeValue."""
    input: AttributeValueCreateInput!
  ): AttributeValueUpdate

  """Creates/Updates translations for attribute value."""
  attributeValueTranslate(
    """Attribute Value ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): AttributeValueTranslate

  """Reorder the values of an attribute."""
  attributeReorderValues(
    """ID of an attribute."""
    attributeId: ID!

    """The list of reordering operations for given attribute values."""
    moves: [ReorderInput]!
  ): AttributeReorderValues

  """Creates a new category."""
  categoryCreate(
    """Fields required to create a category."""
    input: CategoryInput!

    """
    ID of the parent category. If empty, category will be top level category.
    """
    parent: ID
  ): CategoryCreate

  """Deletes a category."""
  categoryDelete(
    """ID of a category to delete."""
    id: ID!
  ): CategoryDelete

  """Deletes categories."""
  categoryBulkDelete(
    """List of category IDs to delete."""
    ids: [ID]!
  ): CategoryBulkDelete

  """Updates a category."""
  categoryUpdate(
    """ID of a category to update."""
    id: ID!

    """Fields required to update a category."""
    input: CategoryInput!
  ): CategoryUpdate

  """Creates/Updates translations for Category."""
  categoryTranslate(
    """Category ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): CategoryTranslate

  """Update public metadata for category."""
  categoryUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CategoryUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata for category."""
  categoryClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CategoryClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update private metadata for category."""
  categoryUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CategoryUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata for category."""
  categoryClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CategoryClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Adds products to a collection."""
  collectionAddProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID]!
  ): CollectionAddProducts

  """Creates a new collection."""
  collectionCreate(
    """Fields required to create a collection."""
    input: CollectionCreateInput!
  ): CollectionCreate

  """Deletes a collection."""
  collectionDelete(
    """ID of a collection to delete."""
    id: ID!
  ): CollectionDelete

  """Reorder the products of a collection."""
  collectionReorderProducts(
    """ID of a collection."""
    collectionId: ID!

    """The collection products position operations."""
    moves: [MoveProductInput]!
  ): CollectionReorderProducts

  """Deletes collections."""
  collectionBulkDelete(
    """List of collection IDs to delete."""
    ids: [ID]!
  ): CollectionBulkDelete

  """Publish collections."""
  collectionBulkPublish(
    """List of collections IDs to (un)publish."""
    ids: [ID]!

    """Determine if collections will be published or not."""
    isPublished: Boolean!
  ): CollectionBulkPublish

  """Remove products from a collection."""
  collectionRemoveProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID]!
  ): CollectionRemoveProducts

  """Updates a collection."""
  collectionUpdate(
    """ID of a collection to update."""
    id: ID!

    """Fields required to update a collection."""
    input: CollectionInput!
  ): CollectionUpdate

  """Creates/Updates translations for collection."""
  collectionTranslate(
    """Collection ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): CollectionTranslate

  """Update public metadata for collection."""
  collectionUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CollectionUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata for collection."""
  collectionClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CollectionClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update private metadata for collection."""
  collectionUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CollectionUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata item for collection."""
  collectionClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CollectionClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Creates a new product."""
  productCreate(
    """Fields required to create a product."""
    input: ProductCreateInput!
  ): ProductCreate

  """Deletes a product."""
  productDelete(
    """ID of a product to delete."""
    id: ID!
  ): ProductDelete

  """Deletes products."""
  productBulkDelete(
    """List of product IDs to delete."""
    ids: [ID]!
  ): ProductBulkDelete

  """Publish products."""
  productBulkPublish(
    """List of products IDs to publish."""
    ids: [ID]!

    """Determine if products will be published or not."""
    isPublished: Boolean!
  ): ProductBulkPublish

  """Updates an existing product."""
  productUpdate(
    """ID of a product to update."""
    id: ID!

    """Fields required to update a product."""
    input: ProductInput!
  ): ProductUpdate

  """Creates/Updates translations for Product."""
  productTranslate(
    """Product ID."""
    id: ID!
    input: TranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslate

  """Update public metadata for product."""
  productUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata item for product."""
  productClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update private metadata for product."""
  productUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata item for product."""
  productClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """
  Create a product image. This mutation must be sent as a `multipart` request.
  More detailed specs of the upload format can be found here:
  https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  productImageCreate(
    """Fields required to create a product image."""
    input: ProductImageCreateInput!
  ): ProductImageCreate

  """Deletes a product image."""
  productImageDelete(
    """ID of a product image to delete."""
    id: ID!
  ): ProductImageDelete

  """Deletes product images."""
  productImageBulkDelete(
    """List of product image IDs to delete."""
    ids: [ID]!
  ): ProductImageBulkDelete

  """Changes ordering of the product image."""
  productImageReorder(
    """IDs of a product images in the desired order."""
    imagesIds: [ID]!

    """Id of product that images order will be altered."""
    productId: ID!
  ): ProductImageReorder

  """Updates a product image."""
  productImageUpdate(
    """ID of a product image to update."""
    id: ID!

    """Fields required to update a product image."""
    input: ProductImageUpdateInput!
  ): ProductImageUpdate

  """Creates a new product type."""
  productTypeCreate(
    """Fields required to create a product type."""
    input: ProductTypeInput!
  ): ProductTypeCreate

  """Deletes a product type."""
  productTypeDelete(
    """ID of a product type to delete."""
    id: ID!
  ): ProductTypeDelete

  """Deletes product types."""
  productTypeBulkDelete(
    """List of product type IDs to delete."""
    ids: [ID]!
  ): ProductTypeBulkDelete

  """Updates an existing product type."""
  productTypeUpdate(
    """ID of a product type to update."""
    id: ID!

    """Fields required to update a product type."""
    input: ProductTypeInput!
  ): ProductTypeUpdate

  """Reorder the attributes of a product type."""
  productTypeReorderAttributes(
    """The list of attribute reordering operations."""
    moves: [ReorderInput]!

    """ID of a product type."""
    productTypeId: ID!

    """The attribute type to reorder."""
    type: AttributeTypeEnum!
  ): ProductTypeReorderAttributes

  """Update public metadata for product type."""
  productTypeUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductTypeUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata for product type."""
  productTypeClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductTypeClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update private metadata for product type."""
  productTypeUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductTypeUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata for product type."""
  productTypeClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductTypeClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """
  Create new digital content. This mutation must be sent as a `multipart`
  request. More detailed specs of the upload format can be found here:
  https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  digitalContentCreate(
    """Fields required to create a digital content."""
    input: DigitalContentUploadInput!

    """ID of a product variant to upload digital content."""
    variantId: ID!
  ): DigitalContentCreate

  """Remove digital content assigned to given variant."""
  digitalContentDelete(
    """ID of a product variant with digital content to remove."""
    variantId: ID!
  ): DigitalContentDelete

  """Update digital content."""
  digitalContentUpdate(
    """Fields required to update a digital content."""
    input: DigitalContentInput!

    """ID of a product variant with digital content to update."""
    variantId: ID!
  ): DigitalContentUpdate

  """Generate new URL to digital content."""
  digitalContentUrlCreate(
    """Fields required to create a new url."""
    input: DigitalContentUrlCreateInput!
  ): DigitalContentUrlCreate

  """Creates a new variant for a product."""
  productVariantCreate(
    """Fields required to create a product variant."""
    input: ProductVariantCreateInput!
  ): ProductVariantCreate

  """Deletes a product variant."""
  productVariantDelete(
    """ID of a product variant to delete."""
    id: ID!
  ): ProductVariantDelete

  """Creates product variants for a given product."""
  productVariantBulkCreate(
    """ID of the product to create the variants for."""
    product: ID!

    """Input list of product variants to create."""
    variants: [ProductVariantBulkCreateInput]!
  ): ProductVariantBulkCreate

  """Deletes product variants."""
  productVariantBulkDelete(
    """List of product variant IDs to delete."""
    ids: [ID]!
  ): ProductVariantBulkDelete

  """Creates stocks for product variant."""
  productVariantStocksCreate(
    """Input list of stocks to create."""
    stocks: [StockInput!]!

    """ID of a product variant for which stocks will be created."""
    variantId: ID!
  ): ProductVariantStocksCreate

  """Delete stocks from product variant."""
  productVariantStocksDelete(
    """ID of product variant for which stocks will be deleted."""
    variantId: ID!
    warehouseIds: [ID!]
  ): ProductVariantStocksDelete

  """Update stocks for product variant."""
  productVariantStocksUpdate(
    """Input list of stocks to create."""
    stocks: [StockInput!]!

    """ID of a product variant for which stocks will be created."""
    variantId: ID!
  ): ProductVariantStocksUpdate

  """Updates an existing variant for product."""
  productVariantUpdate(
    """ID of a product variant to update."""
    id: ID!

    """Fields required to update a product variant."""
    input: ProductVariantInput!
  ): ProductVariantUpdate

  """Creates/Updates translations for Product Variant."""
  productVariantTranslate(
    """Product Variant ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslate

  """Update public metadata for product variant."""
  productVariantUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductVariantUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears public metadata for product variant."""
  productVariantClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductVariantClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Update private metadata for product variant."""
  productVariantUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ProductVariantUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata for product variant."""
  productVariantClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ProductVariantClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Assign an image to a product variant."""
  variantImageAssign(
    """ID of a product image to assign to a variant."""
    imageId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantImageAssign

  """Unassign an image from a product variant."""
  variantImageUnassign(
    """ID of a product image to unassign from a variant."""
    imageId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantImageUnassign

  """Captures the authorized payment amount."""
  paymentCapture(
    """Transaction amount."""
    amount: Decimal

    """Payment ID."""
    paymentId: ID!
  ): PaymentCapture

  """Refunds the captured payment amount."""
  paymentRefund(
    """Transaction amount."""
    amount: Decimal

    """Payment ID."""
    paymentId: ID!
  ): PaymentRefund

  """Voids the authorized payment."""
  paymentVoid(
    """Payment ID."""
    paymentId: ID!
  ): PaymentVoid

  """Confirms payment in a two-step process like 3D secure"""
  paymentSecureConfirm(
    """Payment ID."""
    paymentId: ID!
  ): PaymentSecureConfirm

  """Creates a new page."""
  pageCreate(
    """Fields required to create a page."""
    input: PageInput!
  ): PageCreate

  """Deletes a page."""
  pageDelete(
    """ID of a page to delete."""
    id: ID!
  ): PageDelete

  """Deletes pages."""
  pageBulkDelete(
    """List of page IDs to delete."""
    ids: [ID]!
  ): PageBulkDelete

  """Publish pages."""
  pageBulkPublish(
    """List of page IDs to (un)publish."""
    ids: [ID]!

    """Determine if pages will be published or not."""
    isPublished: Boolean!
  ): PageBulkPublish

  """Updates an existing page."""
  pageUpdate(
    """ID of a page to update."""
    id: ID!

    """Fields required to update a page."""
    input: PageInput!
  ): PageUpdate

  """Creates/Updates translations for Page."""
  pageTranslate(
    """Page ID."""
    id: ID!
    input: PageTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): PageTranslate

  """Completes creating an order."""
  draftOrderComplete(
    """ID of the order that will be completed."""
    id: ID!
  ): DraftOrderComplete

  """Creates a new draft order."""
  draftOrderCreate(
    """Fields required to create an order."""
    input: DraftOrderCreateInput!
  ): DraftOrderCreate

  """Deletes a draft order."""
  draftOrderDelete(
    """ID of a draft order to delete."""
    id: ID!
  ): DraftOrderDelete

  """Deletes draft orders."""
  draftOrderBulkDelete(
    """List of draft order IDs to delete."""
    ids: [ID]!
  ): DraftOrderBulkDelete

  """Deletes order lines."""
  draftOrderLinesBulkDelete(
    """List of order lines IDs to delete."""
    ids: [ID]!
  ): DraftOrderLinesBulkDelete

  """Create order lines for a draft order."""
  draftOrderLinesCreate(
    """ID of the draft order to add the lines to."""
    id: ID!

    """Fields required to add order lines."""
    input: [OrderLineCreateInput]!
  ): DraftOrderLinesCreate

  """Deletes an order line from a draft order."""
  draftOrderLineDelete(
    """ID of the order line to delete."""
    id: ID!
  ): DraftOrderLineDelete

  """Updates an order line of a draft order."""
  draftOrderLineUpdate(
    """ID of the order line to update."""
    id: ID!

    """Fields required to update an order line."""
    input: OrderLineInput!
  ): DraftOrderLineUpdate

  """Updates a draft order."""
  draftOrderUpdate(
    """ID of an order to update."""
    id: ID!

    """Fields required to update an order."""
    input: DraftOrderInput!
  ): DraftOrderUpdate

  """Adds note to the order."""
  orderAddNote(
    """ID of the order to add a note for."""
    order: ID!

    """Fields required to create a note for the order."""
    input: OrderAddNoteInput!
  ): OrderAddNote

  """Cancel an order."""
  orderCancel(
    """ID of the order to cancel."""
    id: ID!
  ): OrderCancel

  """Capture an order."""
  orderCapture(
    """Amount of money to capture."""
    amount: Decimal!

    """ID of the order to capture."""
    id: ID!
  ): OrderCapture

  """Clears stored private metadata value."""
  orderClearPrivateMeta(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): OrderClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears stored metadata value."""
  orderClearMeta(
    """Fields required to update new or stored metadata item."""
    input: MetaPath!

    """Token of an object to clear."""
    token: UUID!
  ): OrderClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Creates new fulfillments for an order."""
  orderFulfill(
    """Fields required to create an fulfillment."""
    input: OrderFulfillInput!

    """ID of the order to be fulfilled."""
    order: ID
  ): OrderFulfill

  """Cancels existing fulfillment and optionally restocks items."""
  orderFulfillmentCancel(
    """ID of an fulfillment to cancel."""
    id: ID!

    """Fields required to cancel an fulfillment."""
    input: FulfillmentCancelInput!
  ): FulfillmentCancel

  """Updates a fulfillment for an order."""
  orderFulfillmentUpdateTracking(
    """ID of an fulfillment to update."""
    id: ID!

    """Fields required to update an fulfillment."""
    input: FulfillmentUpdateTrackingInput!
  ): FulfillmentUpdateTracking

  """Clears metadata for fulfillment."""
  orderFulfillmentClearMeta(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): FulfillmentClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Clears private metadata for fulfillment."""
  orderFulfillmentClearPrivateMeta(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): FulfillmentClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Updates metadata for fulfillment."""
  orderFulfillmentUpdateMeta(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): FulfillmentUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Updates metadata for fulfillment."""
  orderFulfillmentUpdatePrivateMeta(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): FulfillmentUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Mark order as manually paid."""
  orderMarkAsPaid(
    """ID of the order to mark paid."""
    id: ID!
  ): OrderMarkAsPaid

  """Refund an order."""
  orderRefund(
    """Amount of money to refund."""
    amount: Decimal!

    """ID of the order to refund."""
    id: ID!
  ): OrderRefund

  """Updates an order."""
  orderUpdate(
    """ID of an order to update."""
    id: ID!

    """Fields required to update an order."""
    input: OrderUpdateInput!
  ): OrderUpdate

  """Updates meta for order."""
  orderUpdateMeta(
    """Fields required to update new or stored metadata item."""
    input: MetaInput!

    """Token of an object to update."""
    token: UUID!
  ): OrderUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Updates private meta for order."""
  orderUpdatePrivateMeta(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): OrderUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")

  """Updates a shipping method of the order."""
  orderUpdateShipping(
    """ID of the order to update a shipping method."""
    order: ID!

    """Fields required to change shipping method of the order."""
    input: OrderUpdateShippingInput
  ): OrderUpdateShipping

  """Void an order."""
  orderVoid(
    """ID of the order to void."""
    id: ID!
  ): OrderVoid

  """Cancels orders."""
  orderBulkCancel(
    """List of orders IDs to cancel."""
    ids: [ID]!
  ): OrderBulkCancel

  """Delete metadata of an object."""
  deleteMetadata(
    """ID of an object to update."""
    id: ID!

    """Metadata keys to delete."""
    keys: [String!]!
  ): DeleteMetadata

  """Delete object's private metadata."""
  deletePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Metadata keys to delete."""
    keys: [String!]!
  ): DeletePrivateMetadata

  """Updates metadata of an object."""
  updateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: [MetadataInput!]!
  ): UpdateMetadata

  """Updates private metadata of an object."""
  updatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: [MetadataInput!]!
  ): UpdatePrivateMetadata

  """Assigns storefront's navigation menus."""
  assignNavigation(
    """ID of the menu."""
    menu: ID

    """Type of the navigation bar to assign the menu to."""
    navigationType: NavigationType!
  ): AssignNavigation

  """Creates a new Menu."""
  menuCreate(
    """Fields required to create a menu."""
    input: MenuCreateInput!
  ): MenuCreate

  """Deletes a menu."""
  menuDelete(
    """ID of a menu to delete."""
    id: ID!
  ): MenuDelete

  """Deletes menus."""
  menuBulkDelete(
    """List of menu IDs to delete."""
    ids: [ID]!
  ): MenuBulkDelete

  """Updates a menu."""
  menuUpdate(
    """ID of a menu to update."""
    id: ID!

    """Fields required to update a menu."""
    input: MenuInput!
  ): MenuUpdate

  """Creates a new menu item."""
  menuItemCreate(
    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemCreateInput!
  ): MenuItemCreate

  """Deletes a menu item."""
  menuItemDelete(
    """ID of a menu item to delete."""
    id: ID!
  ): MenuItemDelete

  """Deletes menu items."""
  menuItemBulkDelete(
    """List of menu item IDs to delete."""
    ids: [ID]!
  ): MenuItemBulkDelete

  """Updates a menu item."""
  menuItemUpdate(
    """ID of a menu item to update."""
    id: ID!

    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemInput!
  ): MenuItemUpdate

  """Creates/Updates translations for Menu Item."""
  menuItemTranslate(
    """Menu Item ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): MenuItemTranslate

  """Moves items of menus."""
  menuItemMove(
    """ID of the menu."""
    menu: ID!

    """The menu position data."""
    moves: [MenuItemMoveInput]!
  ): MenuItemMove

  """Activate a gift card."""
  giftCardActivate(
    """ID of a gift card to activate."""
    id: ID!
  ): GiftCardActivate

  """Creates a new gift card."""
  giftCardCreate(
    """Fields required to create a gift card."""
    input: GiftCardCreateInput!
  ): GiftCardCreate

  """Deactivate a gift card."""
  giftCardDeactivate(
    """ID of a gift card to deactivate."""
    id: ID!
  ): GiftCardDeactivate

  """Update a gift card."""
  giftCardUpdate(
    """ID of a gift card to update."""
    id: ID!

    """Fields required to update a gift card."""
    input: GiftCardUpdateInput!
  ): GiftCardUpdate

  """Update plugin configuration."""
  pluginUpdate(
    """ID of plugin to update."""
    id: ID!

    """Fields required to update a plugin configuration."""
    input: PluginUpdateInput!
  ): PluginUpdate

  """Creates a new sale."""
  saleCreate(
    """Fields required to create a sale."""
    input: SaleInput!
  ): SaleCreate

  """Deletes a sale."""
  saleDelete(
    """ID of a sale to delete."""
    id: ID!
  ): SaleDelete

  """Deletes sales."""
  saleBulkDelete(
    """List of sale IDs to delete."""
    ids: [ID]!
  ): SaleBulkDelete

  """Updates a sale."""
  saleUpdate(
    """ID of a sale to update."""
    id: ID!

    """Fields required to update a sale."""
    input: SaleInput!
  ): SaleUpdate

  """Adds products, categories, collections to a voucher."""
  saleCataloguesAdd(
    """ID of a sale."""
    id: ID!

    """Fields required to modify catalogue IDs of sale."""
    input: CatalogueInput!
  ): SaleAddCatalogues

  """Removes products, categories, collections from a sale."""
  saleCataloguesRemove(
    """ID of a sale."""
    id: ID!

    """Fields required to modify catalogue IDs of sale."""
    input: CatalogueInput!
  ): SaleRemoveCatalogues

  """Creates/updates translations for a sale."""
  saleTranslate(
    """Voucher ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslate

  """Creates a new voucher."""
  voucherCreate(
    """Fields required to create a voucher."""
    input: VoucherInput!
  ): VoucherCreate

  """Deletes a voucher."""
  voucherDelete(
    """ID of a voucher to delete."""
    id: ID!
  ): VoucherDelete

  """Deletes vouchers."""
  voucherBulkDelete(
    """List of voucher IDs to delete."""
    ids: [ID]!
  ): VoucherBulkDelete

  """Updates a voucher."""
  voucherUpdate(
    """ID of a voucher to update."""
    id: ID!

    """Fields required to update a voucher."""
    input: VoucherInput!
  ): VoucherUpdate

  """Adds products, categories, collections to a voucher."""
  voucherCataloguesAdd(
    """ID of a voucher."""
    id: ID!

    """Fields required to modify catalogue IDs of voucher."""
    input: CatalogueInput!
  ): VoucherAddCatalogues

  """Removes products, categories, collections from a voucher."""
  voucherCataloguesRemove(
    """ID of a voucher."""
    id: ID!

    """Fields required to modify catalogue IDs of voucher."""
    input: CatalogueInput!
  ): VoucherRemoveCatalogues

  """Creates/Updates translations for Voucher."""
  voucherTranslate(
    """Voucher ID."""
    id: ID!
    input: NameTranslationInput!

    """Translation language code."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslate

  """
  Mutation that authenticates a user and returns token and user data.
  
  It overrides the default graphql_jwt.ObtainJSONWebToken to wrap potential
  authentication errors in our Error type, which is consistent to how the rest of
  the mutation works.
  """
  tokenCreate(email: String!, password: String!): CreateToken

  """
  Mutation that refresh user token.
  
  It overrides the default graphql_jwt.Refresh to update user's last_login field.
  """
  tokenRefresh(token: String!): RefreshToken

  """Mutation that confirms if token is valid and also returns user data."""
  tokenVerify(token: String!): VerifyToken

  """Adds a gift card or a voucher to a checkout."""
  checkoutAddPromoCode(
    """Checkout ID."""
    checkoutId: ID!

    """Gift card code or voucher code."""
    promoCode: String!
  ): CheckoutAddPromoCode

  """Update billing address in the existing checkout."""
  checkoutBillingAddressUpdate(
    """The billing address of the checkout."""
    billingAddress: AddressInput!

    """ID of the checkout."""
    checkoutId: ID!
  ): CheckoutBillingAddressUpdate

  """
  Completes the checkout. As a result a new order is created and a payment
  charge is made. This action requires a successful payment before it can be
  performed. In case additional confirmation step as 3D secure is required
  confirmationNeeded flag will be set to True and no order created until payment
  is confirmed with second call of this mutation.
  """
  checkoutComplete(
    """Checkout ID."""
    checkoutId: ID!

    """
    URL of a view where users should be redirected to see the order details. URL in RFC 1808 format.
    """
    redirectUrl: String

    """Determines whether to store the payment source for future usage."""
    storeSource: Boolean = false
  ): CheckoutComplete

  """Create a new checkout."""
  checkoutCreate(
    """Fields required to create checkout."""
    input: CheckoutCreateInput!
  ): CheckoutCreate

  """Sets the customer as the owner of the checkout."""
  checkoutCustomerAttach(
    """ID of the checkout."""
    checkoutId: ID!

    """
    [Deprecated] The ID of the customer. To identify a customer you should
    authenticate with JWT. This field will be removed after 2020-07-31.
    """
    customerId: ID
  ): CheckoutCustomerAttach

  """Removes the user assigned as the owner of the checkout."""
  checkoutCustomerDetach(
    """Checkout ID."""
    checkoutId: ID!
  ): CheckoutCustomerDetach

  """Updates email address in the existing checkout object."""
  checkoutEmailUpdate(
    """Checkout ID."""
    checkoutId: ID

    """email."""
    email: String!
  ): CheckoutEmailUpdate

  """Deletes a CheckoutLine."""
  checkoutLineDelete(
    """The ID of the checkout."""
    checkoutId: ID!

    """ID of the checkout line to delete."""
    lineId: ID
  ): CheckoutLineDelete

  """Adds a checkout line to the existing checkout."""
  checkoutLinesAdd(
    """The ID of the checkout."""
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput]!
  ): CheckoutLinesAdd

  """Updates checkout line in the existing checkout."""
  checkoutLinesUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput]!
  ): CheckoutLinesUpdate

  """Remove a gift card or a voucher from a checkout."""
  checkoutRemovePromoCode(
    """Checkout ID."""
    checkoutId: ID!

    """Gift card code or voucher code."""
    promoCode: String!
  ): CheckoutRemovePromoCode

  """Create a new payment for given checkout."""
  checkoutPaymentCreate(
    """Checkout ID."""
    checkoutId: ID!

    """Data required to create a new payment."""
    input: PaymentInput!
  ): CheckoutPaymentCreate

  """Update shipping address in the existing checkout."""
  checkoutShippingAddressUpdate(
    """ID of the checkout."""
    checkoutId: ID!

    """The mailing address to where the checkout will be shipped."""
    shippingAddress: AddressInput!
  ): CheckoutShippingAddressUpdate

  """Updates the shipping address of the checkout."""
  checkoutShippingMethodUpdate(
    """Checkout ID."""
    checkoutId: ID

    """Shipping method."""
    shippingMethodId: ID!
  ): CheckoutShippingMethodUpdate

  """Updates metadata for checkout."""
  checkoutUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CheckoutUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Clear metadata for checkout."""
  checkoutClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CheckoutClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation. This field will be removed after 2020-07-31.")

  """Updates private metadata for checkout."""
  checkoutUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): CheckoutUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Clear private metadata for checkout."""
  checkoutClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): CheckoutClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Creates a new app."""
  appCreate(
    """Fields required to create a new app."""
    input: AppInput!
  ): AppCreate

  """Updates an existing app."""
  appUpdate(
    """ID of an app to update."""
    id: ID!

    """Fields required to update an existing app."""
    input: AppInput!
  ): AppUpdate

  """Deletes an app."""
  appDelete(
    """ID of an app to delete."""
    id: ID!
  ): AppDelete

  """Creates a new token."""
  appTokenCreate(
    """Fields required to create a new auth token."""
    input: AppTokenInput!
  ): AppTokenCreate

  """Deletes an authentication token assigned to app."""
  appTokenDelete(
    """ID of an auth token to delete."""
    id: ID!
  ): AppTokenDelete

  """Sends an email with the account password modification link."""
  requestPasswordReset(
    """Email of the user that will be used for password recovery."""
    email: String!

    """
    URL of a view where users should be redirected to reset the password. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): RequestPasswordReset

  """Confirm user account with token sent by email during registration."""
  confirmAccount(
    """E-mail of the user performing account confirmation."""
    email: String!

    """A one-time token required to confirm the account."""
    token: String!
  ): ConfirmAccount

  """
  Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
  """
  setPassword(
    """A one-time token required to set the password."""
    token: String!
    email: String!
    password: String!
  ): SetPassword

  """Change the password of the logged in user."""
  passwordChange(
    """New user password."""
    newPassword: String!

    """Current user password."""
    oldPassword: String!
  ): PasswordChange

  """Request email change of the logged in user."""
  requestEmailChange(
    """New user email."""
    newEmail: String!

    """User password."""
    password: String!

    """
    URL of a view where users should be redirected to update the email address. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): RequestEmailChange

  """Confirm the email change of the logged-in user."""
  confirmEmailChange(
    """A one-time token required to change the email."""
    token: String!
  ): ConfirmEmailChange

  """Create a new address for the customer."""
  accountAddressCreate(
    """Fields required to create address."""
    input: AddressInput!

    """
    A type of address. If provided, the new address will be automatically
    assigned as the customer's default address of that type.
    """
    type: AddressTypeEnum
  ): AccountAddressCreate

  """Updates an address of the logged-in user."""
  accountAddressUpdate(
    """ID of the address to update."""
    id: ID!

    """Fields required to update the address."""
    input: AddressInput!
  ): AccountAddressUpdate

  """Delete an address of the logged-in user."""
  accountAddressDelete(
    """ID of the address to delete."""
    id: ID!
  ): AccountAddressDelete

  """Sets a default address for the authenticated user."""
  accountSetDefaultAddress(
    """ID of the address to set as default."""
    id: ID!

    """The type of address."""
    type: AddressTypeEnum!
  ): AccountSetDefaultAddress

  """Register a new user."""
  accountRegister(
    """Fields required to create a user."""
    input: AccountRegisterInput!
  ): AccountRegister

  """Updates the account of the logged-in user."""
  accountUpdate(
    """Fields required to update the account of the logged-in user."""
    input: AccountInput!
  ): AccountUpdate

  """Sends an email with the account removal link for the logged-in user."""
  accountRequestDeletion(
    """
    URL of a view where users should be redirected to delete their account. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): AccountRequestDeletion

  """Remove user account."""
  accountDelete(
    """
    A one-time token required to remove account. Sent by email using AccountRequestDeletion mutation.
    """
    token: String!
  ): AccountDelete

  """Updates metadata of the logged-in user."""
  accountUpdateMeta(
    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): AccountUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Creates user address."""
  addressCreate(
    """Fields required to create address."""
    input: AddressInput!

    """ID of a user to create address for."""
    userId: ID!
  ): AddressCreate

  """Updates an address."""
  addressUpdate(
    """ID of the address to update."""
    id: ID!

    """Fields required to update the address."""
    input: AddressInput!
  ): AddressUpdate

  """Deletes an address."""
  addressDelete(
    """ID of the address to delete."""
    id: ID!
  ): AddressDelete

  """Sets a default address for the given user."""
  addressSetDefault(
    """ID of the address."""
    addressId: ID!

    """The type of address."""
    type: AddressTypeEnum!

    """ID of the user to change the address for."""
    userId: ID!
  ): AddressSetDefault

  """Creates a new customer."""
  customerCreate(
    """Fields required to create a customer."""
    input: UserCreateInput!
  ): CustomerCreate

  """Updates an existing customer."""
  customerUpdate(
    """ID of a customer to update."""
    id: ID!

    """Fields required to update a customer."""
    input: CustomerInput!
  ): CustomerUpdate

  """Deletes a customer."""
  customerDelete(
    """ID of a customer to delete."""
    id: ID!
  ): CustomerDelete

  """Deletes customers."""
  customerBulkDelete(
    """List of user IDs to delete."""
    ids: [ID]!
  ): CustomerBulkDelete

  """Creates a new staff user."""
  staffCreate(
    """Fields required to create a staff user."""
    input: StaffCreateInput!
  ): StaffCreate

  """Updates an existing staff user."""
  staffUpdate(
    """ID of a staff user to update."""
    id: ID!

    """Fields required to update a staff user."""
    input: StaffUpdateInput!
  ): StaffUpdate

  """Deletes a staff user."""
  staffDelete(
    """ID of a staff user to delete."""
    id: ID!
  ): StaffDelete

  """Deletes staff users."""
  staffBulkDelete(
    """List of user IDs to delete."""
    ids: [ID]!
  ): StaffBulkDelete

  """
  Create a user avatar. Only for staff members. This mutation must be sent as a
  `multipart` request. More detailed specs of the upload format can be found
  here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  userAvatarUpdate(
    """Represents an image file in a multipart request."""
    image: Upload!
  ): UserAvatarUpdate

  """Deletes a user avatar. Only for staff members."""
  userAvatarDelete: UserAvatarDelete

  """Activate or deactivate users."""
  userBulkSetActive(
    """List of user IDs to (de)activate)."""
    ids: [ID]!

    """Determine if users will be set active or not."""
    isActive: Boolean!
  ): UserBulkSetActive

  """Updates metadata for user."""
  userUpdateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): UserUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Clear metadata for user."""
  userClearMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): UserClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation. This field will be removed after 2020-07-31.")

  """Updates private metadata for user."""
  userUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): UserUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Clear private metadata for user."""
  userClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): UserClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation. This field will be removed after 2020-07-31.")

  """Creates a new service account."""
  serviceAccountCreate(
    """Fields required to create a new service account."""
    input: ServiceAccountInput!
  ): ServiceAccountCreate @deprecated(reason: "Use the `appCreate` mutation instead. This field will be removed after 2020-07-31.")

  """Updates an existing service account."""
  serviceAccountUpdate(
    """ID of a service account to update."""
    id: ID!

    """Fields required to update an existing service account."""
    input: ServiceAccountInput!
  ): ServiceAccountUpdate @deprecated(reason: "Use the `appUpdate` mutation instead. This field will be removed after 2020-07-31.")

  """Deletes a service account."""
  serviceAccountDelete(
    """ID of a service account to delete."""
    id: ID!
  ): ServiceAccountDelete @deprecated(reason: "Use the `appDelete` mutation instead. This field will be removed after 2020-07-31.")

  """Updates private metadata for a service account."""
  serviceAccountUpdatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update new or stored metadata item."""
    input: MetaInput!
  ): ServiceAccountUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation with App instead.This field will be removed after 2020-07-31.")

  """Clear private metadata for a service account."""
  serviceAccountClearPrivateMetadata(
    """ID of a customer to update."""
    id: ID!

    """Fields required to identify stored metadata item."""
    input: MetaPath!
  ): ServiceAccountClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation with App instead.This field will be removed after 2020-07-31.")

  """Creates a new token."""
  serviceAccountTokenCreate(
    """Fields required to create a new auth token."""
    input: ServiceAccountTokenInput!
  ): ServiceAccountTokenCreate @deprecated(reason: "Use the `appTokenCreate` mutation instead. This field will be removed after 2020-07-31.")

  """Deletes an authentication token assigned to service account."""
  serviceAccountTokenDelete(
    """ID of an auth token to delete."""
    id: ID!
  ): ServiceAccountTokenDelete @deprecated(reason: "Use the `appTokenDelete` mutation instead. This field will be removed after 2020-07-31.")

  """Create new permission group."""
  permissionGroupCreate(
    """Input fields to create permission group."""
    input: PermissionGroupCreateInput!
  ): PermissionGroupCreate

  """Update permission group."""
  permissionGroupUpdate(
    """ID of the group to update."""
    id: ID!

    """Input fields to create permission group."""
    input: PermissionGroupUpdateInput!
  ): PermissionGroupUpdate

  """Delete permission group."""
  permissionGroupDelete(
    """ID of the group to delete."""
    id: ID!
  ): PermissionGroupDelete
}

input NameTranslationInput {
  name: String
}

"""Represents shop's navigation menus."""
type Navigation {
  """Main navigation bar."""
  main: Menu

  """Secondary navigation bar."""
  secondary: Menu
}

enum NavigationType {
  """Main storefront navigation."""
  MAIN

  """Secondary storefront navigation."""
  SECONDARY
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

interface ObjectWithMetadata {
  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

"""Represents an order in the shop."""
type Order implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  created: DateTime!
  status: OrderStatus!
  user: User
  languageCode: String!
  trackingClientId: String!
  billingAddress: Address
  shippingAddress: Address
  shippingMethod: ShippingMethod
  shippingMethodName: String

  """Total price of shipping."""
  shippingPrice: TaxedMoney
  token: String!
  voucher: Voucher

  """List of user gift cards."""
  giftCards: [GiftCard]
  discount: Money
  discountName: String
  translatedDiscountName: String
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of shipments for the order."""
  fulfillments: [Fulfillment]!

  """List of order lines."""
  lines: [OrderLine]!

  """
  List of actions that can be performed in the current state of an order.
  """
  actions: [OrderAction]!

  """Shipping methods that can be used with this order."""
  availableShippingMethods: [ShippingMethod]

  """User-friendly number of an order."""
  number: String

  """Informs if an order is fully paid."""
  isPaid: Boolean

  """Internal payment status."""
  paymentStatus: PaymentChargeStatusEnum

  """User-friendly payment status."""
  paymentStatusDisplay: String

  """List of payments for the order."""
  payments: [Payment]

  """Total amount of the order."""
  total: TaxedMoney

  """The sum of line prices not including shipping."""
  subtotal: TaxedMoney

  """User-friendly order status."""
  statusDisplay: String

  """
  Informs whether a draft order can be finalized(turned into a regular order).
  """
  canFinalize: Boolean!

  """Amount authorized for the order."""
  totalAuthorized: Money

  """Amount captured by payment."""
  totalCaptured: Money

  """List of events associated with the order."""
  events: [OrderEvent]

  """The difference between the paid and the order total amount."""
  totalBalance: Money!

  """Email address of the customer."""
  userEmail: String

  """Returns True, if order requires shipping."""
  isShippingRequired: Boolean!
}

enum OrderAction {
  """Represents the capture action."""
  CAPTURE

  """Represents a mark-as-paid action."""
  MARK_AS_PAID

  """Represents a refund action."""
  REFUND

  """Represents a void action."""
  VOID
}

"""Adds note to the order."""
type OrderAddNote {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Order with the note added."""
  order: Order

  """Order note created."""
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input OrderAddNoteInput {
  """Note message."""
  message: String!
}

"""Cancels orders."""
type OrderBulkCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  orderErrors: [OrderError!]!
}

"""Cancel an order."""
type OrderCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Capture an order."""
type OrderCapture {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Captured order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Clears stored metadata value."""
type OrderClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

"""Clears stored private metadata value."""
type OrderClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

type OrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderCountableEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

input OrderDraftFilterInput {
  customer: String
  created: DateRangeInput
  search: String
}

type OrderError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrderErrorCode!

  """Warehouse ID which causes the error."""
  warehouse: ID

  """Order line ID which causes the error."""
  orderLine: ID
}

"""An enumeration."""
enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_CANCEL_ORDER
  CANNOT_DELETE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  PAYMENT_ERROR
  PAYMENT_MISSING
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  INSUFFICIENT_STOCK
  DUPLICATED_INPUT_ITEM
}

"""History log of the order."""
type OrderEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Order event type."""
  type: OrderEventsEnum

  """User who performed the action."""
  user: User

  """Content of the event."""
  message: String

  """Email of the customer."""
  email: String

  """Type of an email sent to the customer."""
  emailType: OrderEventsEmailsEnum

  """Amount of money."""
  amount: Float

  """The payment ID from the payment gateway."""
  paymentId: String

  """The payment gateway of the payment."""
  paymentGateway: String

  """Number of items."""
  quantity: Int

  """Composed ID of the Fulfillment."""
  composedId: String

  """User-friendly number of an order."""
  orderNumber: String

  """List of oversold lines names."""
  oversoldItems: [String]

  """The concerned lines."""
  lines: [OrderEventOrderLineObject]

  """The lines fulfilled."""
  fulfilledItems: [FulfillmentLine]

  """The warehouse were items were restocked."""
  warehouse: Warehouse
}

type OrderEventCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderEventCountableEdge {
  """The item at the end of the edge."""
  node: OrderEvent!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderEventOrderLineObject {
  """The variant quantity."""
  quantity: Int

  """The order line."""
  orderLine: OrderLine

  """The variant name."""
  itemName: String
}

"""An enumeration."""
enum OrderEventsEmailsEnum {
  PAYMENT_CONFIRMATION
  SHIPPING_CONFIRMATION
  TRACKING_UPDATED
  ORDER_CONFIRMATION
  FULFILLMENT_CONFIRMATION
  DIGITAL_LINKS
}

"""An enumeration."""
enum OrderEventsEnum {
  DRAFT_CREATED
  DRAFT_ADDED_PRODUCTS
  DRAFT_REMOVED_PRODUCTS
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  CANCELED
  ORDER_MARKED_AS_PAID
  ORDER_FULLY_PAID
  UPDATED_ADDRESS
  EMAIL_SENT
  PAYMENT_CAPTURED
  PAYMENT_REFUNDED
  PAYMENT_VOIDED
  PAYMENT_FAILED
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
}

input OrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum]
  status: [OrderStatusFilter]
  customer: String
  created: DateRangeInput
  search: String
}

"""Creates new fulfillments for an order."""
type OrderFulfill {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """List of created fulfillments."""
  fulfillments: [Fulfillment]

  """Fulfilled order."""
  order: Order
  orderErrors: [OrderError!]!
}

input OrderFulfillInput {
  """List of items informing how to fulfill the order."""
  lines: [OrderFulfillLineInput!]!

  """If true, send an email notification to the customer."""
  notifyCustomer: Boolean
}

input OrderFulfillLineInput {
  """The ID of the order line."""
  orderLineId: ID

  """List of stock items to create."""
  stocks: [OrderFulfillStockInput!]!
}

input OrderFulfillStockInput {
  """The number of line items to be fulfilled from given warehouse."""
  quantity: Int

  """ID of the warehouse from which the item will be fulfilled."""
  warehouse: ID
}

"""Represents order line of particular order."""
type OrderLine implements Node {
  """The ID of the object."""
  id: ID!
  productName: String!
  variantName: String!
  productSku: String!
  isShippingRequired: Boolean!
  quantity: Int!
  quantityFulfilled: Int!
  taxRate: Float!
  digitalContentUrl: DigitalContentUrl

  """The main thumbnail for the ordered product."""
  thumbnail(
    """Size of thumbnail."""
    size: Int
  ): Image

  """Price of the single item in the order line."""
  unitPrice: TaxedMoney

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all.
  """
  variant: ProductVariant

  """Product name in the customer's language"""
  translatedProductName: String!

  """Variant name in the customer's language"""
  translatedVariantName: String!
}

input OrderLineCreateInput {
  """Number of variant items ordered."""
  quantity: Int!

  """Product variant ID."""
  variantId: ID!
}

input OrderLineInput {
  """Number of variant items ordered."""
  quantity: Int!
}

"""Mark order as manually paid."""
type OrderMarkAsPaid {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Order marked as paid."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Refund an order."""
type OrderRefund {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A refunded order."""
  order: Order
  orderErrors: [OrderError!]!
}

enum OrderSortField {
  """Sort orders by number."""
  NUMBER

  """Sort orders by creation date."""
  CREATION_DATE

  """Sort orders by customer."""
  CUSTOMER

  """Sort orders by payment."""
  PAYMENT

  """Sort orders by fulfillment status."""
  FULFILLMENT_STATUS

  """Sort orders by total."""
  TOTAL
}

input OrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orders by the selected field."""
  field: OrderSortField!
}

"""An enumeration."""
enum OrderStatus {
  """Draft"""
  DRAFT

  """Unfulfilled"""
  UNFULFILLED

  """Partially fulfilled"""
  PARTIALLY_FULFILLED

  """Fulfilled"""
  FULFILLED

  """Canceled"""
  CANCELED
}

enum OrderStatusFilter {
  READY_TO_FULFILL
  READY_TO_CAPTURE
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
}

"""Updates an order."""
type OrderUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

input OrderUpdateInput {
  """Billing address of the customer."""
  billingAddress: AddressInput

  """Email address of the customer."""
  userEmail: String

  """Shipping address of the customer."""
  shippingAddress: AddressInput
}

"""Updates meta for order."""
type OrderUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

"""Updates private meta for order."""
type OrderUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

"""Updates a shipping method of the order."""
type OrderUpdateShipping {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Order with updated shipping method."""
  order: Order
  orderErrors: [OrderError!]!
}

input OrderUpdateShippingInput {
  """ID of the selected shipping method."""
  shippingMethod: ID
}

"""Void an order."""
type OrderVoid {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A voided order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""
A static page that can be manually added by a shop operator through the dashboard.
"""
type Page implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  title: String!
  content: String!
  contentJson: JSONString!
  publicationDate: Date
  isPublished: Boolean!
  slug: String!
  created: DateTime!

  """Returns translated page fields for the given language code."""
  translation(
    """A language code to return the translation for page."""
    languageCode: LanguageCodeEnum!
  ): PageTranslation
}

"""Deletes pages."""
type PageBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  pageErrors: [PageError!]!
}

"""Publish pages."""
type PageBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  pageErrors: [PageError!]!
}

type PageCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PageCountableEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new page."""
type PageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

"""Deletes a page."""
type PageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

type PageError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PageErrorCode!
}

"""An enumeration."""
enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PageFilterInput {
  search: String
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PageInput {
  """Page internal name."""
  slug: String

  """Page title."""
  title: String

  """Page content. May consist of ordinary text, HTML and images."""
  content: String

  """Page content in JSON format."""
  contentJson: JSONString

  """Determines if page is visible in the storefront."""
  isPublished: Boolean

  """Publication date. ISO 8601 standard."""
  publicationDate: String

  """Search engine optimization fields."""
  seo: SeoInput
}

enum PageSortField {
  """Sort pages by title."""
  TITLE

  """Sort pages by slug."""
  SLUG

  """Sort pages by visibility."""
  VISIBILITY

  """Sort pages by creation date."""
  CREATION_DATE

  """Sort pages by publication date."""
  PUBLICATION_DATE
}

input PageSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort pages by the selected field."""
  field: PageSortField!
}

type PageTranslatableContent implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  title: String!
  content: String!
  contentJson: JSONString!

  """Returns translated page fields for the given language code."""
  translation(
    """A language code to return the translation for page."""
    languageCode: LanguageCodeEnum!
  ): PageTranslation

  """
  ('A static page that can be manually added by a shop operator ', 'through the dashboard.')
  """
  page: Page
}

"""Creates/Updates translations for Page."""
type PageTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  page: PageTranslatableContent
}

type PageTranslation implements Node {
  seoTitle: String
  seoDescription: String

  """The ID of the object."""
  id: ID!
  title: String!
  content: String!
  contentJson: JSONString!

  """Translation language."""
  language: LanguageDisplay!
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: String
  contentJson: JSONString
}

"""Updates an existing page."""
type PageUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

"""Change the password of the logged in user."""
type PasswordChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance with a new password."""
  user: User
  accountErrors: [AccountError!]!
}

"""Represents a payment of a given type."""
type Payment implements Node {
  """The ID of the object."""
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  checkout: Checkout
  order: Order
  billingEmail: String!
  customerIpAddress: String
  extraData: String!

  """Internal payment status."""
  chargeStatus: PaymentChargeStatusEnum!

  """
  List of actions that can be performed in the current state of a payment.
  """
  actions: [OrderAction]!

  """Total amount of the payment."""
  total: Money

  """Total amount captured for this payment."""
  capturedAmount: Money

  """Customer billing address."""
  billingAddress: Address

  """List of all transactions within this payment."""
  transactions: [Transaction]

  """Maximum amount of money that can be captured."""
  availableCaptureAmount: Money

  """Maximum amount of money that can be refunded."""
  availableRefundAmount: Money

  """The details of the card used for this payment."""
  creditCard: CreditCard
}

"""Captures the authorized payment amount."""
type PaymentCapture {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""An enumeration."""
enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
}

type PaymentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PaymentCountableEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

type PaymentError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PaymentErrorCode!
}

"""An enumeration."""
enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  PARTIAL_PAYMENT_NOT_ALLOWED
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  SHIPPING_METHOD_NOT_SET
  PAYMENT_ERROR
  REQUIRED
  UNIQUE
}

"""
Available payment gateway backend with configuration necessary to setup client.
"""
type PaymentGateway {
  """Payment gateway name."""
  name: String!

  """Payment gateway ID."""
  id: ID!

  """Payment gateway client configuration."""
  config: [GatewayConfigLine!]!
}

input PaymentInput {
  """A gateway to use with that payment."""
  gateway: String!

  """
  Client-side generated payment token, representing customer's billing data in a secure manner.
  """
  token: String!

  """
  Total amount of the transaction, including all taxes and discounts. If no
  amount is provided, the checkout total will be used.
  """
  amount: Decimal

  """
  [Deprecated] Billing address. If empty, the billing address associated with
  the checkout instance will be used. Use `checkoutCreate` or
  `checkoutBillingAddressUpdate` mutations to set it. This field will be removed
  after 2020-07-31.
  """
  billingAddress: AddressInput
}

"""Refunds the captured payment amount."""
type PaymentRefund {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""Confirms payment in a two-step process like 3D secure"""
type PaymentSecureConfirm {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""
Represents a payment source stored for user in payment gateway, such as credit card.
"""
type PaymentSource {
  """Payment gateway name."""
  gateway: String!

  """Stored credit card details if available."""
  creditCardInfo: CreditCard
}

"""Voids the authorized payment."""
type PaymentVoid {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""Represents a permission object in a friendly form."""
type Permission {
  """Internal code for permission."""
  code: PermissionEnum!

  """Describe action(s) allowed to do by permission."""
  name: String!
}

"""An enumeration."""
enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_SERVICE_ACCOUNTS
  MANAGE_APPS
  MANAGE_DISCOUNTS
  MANAGE_PLUGINS
  MANAGE_GIFT_CARD
  MANAGE_MENUS
  MANAGE_ORDERS
  MANAGE_PAGES
  MANAGE_PRODUCTS
  MANAGE_SHIPPING
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_WEBHOOKS
  MANAGE_CHECKOUTS
}

"""Create new permission group."""
type PermissionGroupCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  group: Group
  permissionGroupErrors: [PermissionGroupError!]!
}

input PermissionGroupCreateInput {
  """List of permission code names to assign to this group."""
  addPermissions: [PermissionEnum!]

  """List of users to assign to this group."""
  addUsers: [ID!]

  """Group name."""
  name: String!
}

"""Delete permission group."""
type PermissionGroupDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PermissionGroupErrorCode!

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]

  """List of user IDs which causes the error."""
  users: [ID!]
}

"""An enumeration."""
enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
}

input PermissionGroupFilterInput {
  search: String
}

enum PermissionGroupSortField {
  """Sort permission group accounts by name."""
  NAME
}

input PermissionGroupSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort permission group by the selected field."""
  field: PermissionGroupSortField!
}

"""Update permission group."""
type PermissionGroupUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  group: Group
  permissionGroupErrors: [PermissionGroupError!]!
}

input PermissionGroupUpdateInput {
  """List of permission code names to assign to this group."""
  addPermissions: [PermissionEnum!]

  """List of users to assign to this group."""
  addUsers: [ID!]

  """Group name."""
  name: String

  """List of permission code names to unassign from this group."""
  removePermissions: [PermissionEnum!]

  """List of users to unassign from this group."""
  removeUsers: [ID!]
}

"""Plugin."""
type Plugin implements Node {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  configuration: [ConfigurationItem]
}

type PluginCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PluginCountableEdge {
  """The item at the end of the edge."""
  node: Plugin!

  """A cursor for use in pagination."""
  cursor: String!
}

type PluginError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PluginErrorCode!
}

"""An enumeration."""
enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginFilterInput {
  active: Boolean
  search: String
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

input PluginSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort plugins by the selected field."""
  field: PluginSortField!
}

"""Update plugin configuration."""
type PluginUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  plugin: Plugin
  pluginsErrors: [PluginError!]!
}

input PluginUpdateInput {
  """Indicates whether the plugin should be enabled."""
  active: Boolean

  """Configuration of the plugin."""
  configuration: [ConfigurationItemInput]
}

input PriceRangeInput {
  """Price greater than or equal to."""
  gte: Float

  """Price less than or equal to."""
  lte: Float
}

"""Represents an individual item for sale in the storefront."""
type Product implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  publicationDate: Date
  isPublished: Boolean!
  productType: ProductType!
  slug: String!
  category: Category
  updatedAt: DateTime
  chargeTaxes: Boolean!
  weight: Weight

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """The storefront URL for the product."""
  url: String! @deprecated(reason: "This field will be removed after 2020-07-31.")

  """The main thumbnail for a product."""
  thumbnail(
    """Size of thumbnail."""
    size: Int
  ): Image

  """
  Lists the storefront product's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: ProductPricingInfo

  """Whether the product is in stock and visible or not."""
  isAvailable: Boolean

  """The product's default base price."""
  basePrice: Money

  """The price of the cheapest variant (including discounts)."""
  minimalVariantPrice: Money

  """A type of tax. Assigned by enabled tax gateway"""
  taxType: TaxType

  """List of attributes assigned to this product."""
  attributes: [SelectedAttribute!]!
  purchaseCost: MoneyRange
  margin: Margin

  """Get a single product image by ID."""
  imageById(
    """ID of a product image."""
    id: ID
  ): ProductImage

  """List of variants for the product."""
  variants: [ProductVariant]

  """List of images for the product."""
  images: [ProductImage]

  """List of collections for the product."""
  collections: [Collection]

  """Returns translated product fields for the given language code."""
  translation(
    """A language code to return the translation for product."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslation
}

type ProductAttributeError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """List of attributes IDs which causes the error."""
  attributes: [ID!]
}

"""Deletes products."""
type ProductBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Publish products."""
type ProductBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata item for product."""
type ProductClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

"""Clears private metadata item for product."""
type ProductClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductCountableEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new product."""
type ProductCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  """List of attributes."""
  attributes: [AttributeValueInput]

  """Publication date. ISO 8601 standard."""
  publicationDate: Date

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """List of IDs of collections that the product belongs to."""
  collections: [ID]

  """Product description (HTML/text)."""
  description: String

  """Product description (JSON)."""
  descriptionJson: JSONString

  """Determines if product is visible to customers."""
  isPublished: Boolean

  """Product name."""
  name: String

  """Product slug."""
  slug: String

  """Product price."""
  basePrice: Decimal

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: WeightScalar

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants.
  """
  sku: String

  """
  Determines if the inventory of this product should be tracked. If false, the
  quantity won't change when customers buy this item. Note: this field is only
  used if a product doesn't use variants.
  """
  trackInventory: Boolean

  """ID of the type that product belongs to."""
  productType: ID!

  """
  Stocks of a product available for sale. Note: this field is only used if a product doesn't use variants.
  """
  stocks: [StockInput!]
}

"""Deletes a product."""
type ProductDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!
}

"""An enumeration."""
enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  NOT_PRODUCTS_IMAGE
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [ID]
  categories: [ID]
  hasCategory: Boolean
  price: PriceRangeInput
  attributes: [AttributeInput]
  stockAvailability: StockAvailability
  productType: ID
  stocks: ProductStockFilterInput
  search: String
  minimalPrice: PriceRangeInput
  productTypes: [ID]
}

"""Represents a product image."""
type ProductImage implements Node {
  """The ID of the object."""
  id: ID!
  sortOrder: Int
  alt: String!

  """The URL of the image."""
  url(
    """Size of the image."""
    size: Int
  ): String!
}

"""Deletes product images."""
type ProductImageBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""
Create a product image. This mutation must be sent as a `multipart` request.
More detailed specs of the upload format can be found here:
https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type ProductImageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateInput {
  """Alt text for an image."""
  alt: String

  """Represents an image file in a multipart request."""
  image: Upload!

  """ID of an product."""
  product: ID!
}

"""Deletes a product image."""
type ProductImageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Changes ordering of the product image."""
type ProductImageReorder {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  images: [ProductImage]
  productErrors: [ProductError!]!
}

"""Updates a product image."""
type ProductImageUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageUpdateInput {
  """Alt text for an image."""
  alt: String
}

input ProductInput {
  """List of attributes."""
  attributes: [AttributeValueInput]

  """Publication date. ISO 8601 standard."""
  publicationDate: Date

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """List of IDs of collections that the product belongs to."""
  collections: [ID]

  """Product description (HTML/text)."""
  description: String

  """Product description (JSON)."""
  descriptionJson: JSONString

  """Determines if product is visible to customers."""
  isPublished: Boolean

  """Product name."""
  name: String

  """Product slug."""
  slug: String

  """Product price."""
  basePrice: Decimal

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: WeightScalar

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants.
  """
  sku: String

  """
  Determines if the inventory of this product should be tracked. If false, the
  quantity won't change when customers buy this item. Note: this field is only
  used if a product doesn't use variants.
  """
  trackInventory: Boolean
}

input ProductOrder {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Sort product by the selected attribute's values.
  Note: this doesn't take translations into account yet.
  """
  attributeId: ID

  """Sort products by the selected field."""
  field: ProductOrderField
}

enum ProductOrderField {
  """Sort products by name."""
  NAME

  """Sort products by price."""
  PRICE

  """Sort products by a minimal price of a product's variant."""
  MINIMAL_PRICE

  """Sort products by update date."""
  DATE

  """Sort products by type."""
  TYPE

  """Sort products by publication status."""
  PUBLISHED
}

"""Represents availability of a product in the storefront."""
type ProductPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The discounted price range of the product variants."""
  priceRange: TaxedMoneyRange

  """The undiscounted price range of the product variants."""
  priceRangeUndiscounted: TaxedMoneyRange

  """
  The discounted price range of the product variants in the local currency.
  """
  priceRangeLocalCurrency: TaxedMoneyRange
}

input ProductStockFilterInput {
  warehouseIds: [ID!]
  quantity: IntRangeInput
}

type ProductTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Returns translated product fields for the given language code."""
  translation(
    """A language code to return the translation for product."""
    languageCode: LanguageCodeEnum!
  ): ProductTranslation

  """Represents an individual item for sale in the storefront."""
  product: Product
}

"""Creates/Updates translations for Product."""
type ProductTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  product: Product
}

type ProductTranslation implements Node {
  """The ID of the object."""
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!

  """Translation language."""
  language: LanguageDisplay!
}

"""
Represents a type of product. It defines what attributes are available to products of this type.
"""
type ProductType implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  name: String!
  slug: String!
  hasVariants: Boolean!
  isShippingRequired: Boolean!
  isDigital: Boolean!
  weight: Weight

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of products of this type."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """A type of tax rate."""
  taxRate: TaxRateType

  """A type of tax. Assigned by enabled tax gateway"""
  taxType: TaxType

  """Variant attributes of that product type."""
  variantAttributes: [Attribute]

  """Product attributes of that product type."""
  productAttributes: [Attribute]
  availableAttributes(
    filter: AttributeFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeCountableConnection
}

"""Deletes product types."""
type ProductTypeBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata for product type."""
type ProductTypeClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

"""Clears private metadata for product type."""
type ProductTypeClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

enum ProductTypeConfigurable {
  CONFIGURABLE
  SIMPLE
}

type ProductTypeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductTypeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductTypeCountableEdge {
  """The item at the end of the edge."""
  node: ProductType!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new product type."""
type ProductTypeCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

"""Deletes a product type."""
type ProductTypeDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

enum ProductTypeEnum {
  DIGITAL
  SHIPPABLE
}

input ProductTypeFilterInput {
  search: String
  configurable: ProductTypeConfigurable
  productType: ProductTypeEnum
  ids: [ID]
}

input ProductTypeInput {
  """Name of the product type."""
  name: String

  """Product type slug."""
  slug: String

  """
  Determines if product of this type has multiple variants. This option mainly
  simplifies product management in the dashboard. There is always at least one
  variant created under the hood.
  """
  hasVariants: Boolean

  """List of attributes shared among all product variants."""
  productAttributes: [ID]

  """
  List of attributes used to distinguish between different variants of a product.
  """
  variantAttributes: [ID]

  """Determines if shipping is required for products of this variant."""
  isShippingRequired: Boolean

  """Determines if products are digital."""
  isDigital: Boolean

  """Weight of the ProductType items."""
  weight: WeightScalar

  """Tax rate for enabled tax gateway."""
  taxCode: String
}

"""Reorder the attributes of a product type."""
type ProductTypeReorderAttributes {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Product type from which attributes are reordered."""
  productType: ProductType
  productErrors: [ProductError!]!
}

enum ProductTypeSortField {
  """Sort products by name."""
  NAME

  """Sort products by type."""
  DIGITAL

  """Sort products by shipping."""
  SHIPPING_REQUIRED
}

input ProductTypeSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort product types by the selected field."""
  field: ProductTypeSortField!
}

"""Updates an existing product type."""
type ProductTypeUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

"""Update public metadata for product type."""
type ProductTypeUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

"""Update private metadata for product type."""
type ProductTypeUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

"""Updates an existing product."""
type ProductUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

"""Update public metadata for product."""
type ProductUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

"""Update private metadata for product."""
type ProductUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

"""Represents a version of a product such as different size or color."""
type ProductVariant implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  name: String!
  sku: String!
  product: Product!
  trackInventory: Boolean!
  weight: Weight

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """Quantity of a product available for sale."""
  quantity: Int! @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")

  """Quantity allocated for orders."""
  quantityAllocated: Int @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")

  """Quantity of a product available for sale."""
  stockQuantity: Int! @deprecated(reason: "Use the quantityAvailable field instead. This field will be removed after 2020-07-31.")

  """
  Override the base price of a product if necessary. A value of `null` indicates that the default product price is used.
  """
  priceOverride: Money

  """
  Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: VariantPricingInfo

  """Whether the variant is in stock and visible or not."""
  isAvailable: Boolean @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")

  """List of attributes assigned to this variant."""
  attributes: [SelectedAttribute!]!

  """Cost price of the variant."""
  costPrice: Money

  """Gross margin percentage value."""
  margin: Int

  """Total quantity ordered."""
  quantityOrdered: Int

  """
  Total revenue generated by a variant in given period of time. Note: this field
  should be queried using `reportProductSales` query as it uses optimizations
  suitable for such calculations.
  """
  revenue(period: ReportingPeriod): TaxedMoney

  """List of images for the product variant."""
  images: [ProductImage]

  """Returns translated product variant fields for the given language code."""
  translation(
    """A language code to return the translation for product variant."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslation

  """Digital content for the product variant."""
  digitalContent: DigitalContent

  """Stocks for the product variant."""
  stocks(
    """Two-letter ISO 3166-1 country code."""
    countryCode: CountryCode
  ): [Stock]

  """Quantity of a product available for sale in one checkout."""
  quantityAvailable(
    """
    Two-letter ISO 3166-1 country code. When provided, the exact quantity from a
    warehouse operating in shipping zones that contain this country will be
    returned. Otherwise, it will return the maximum quantity from all shipping zones.
    """
    countryCode: CountryCode
  ): Int!
}

"""Creates product variants for a given product."""
type ProductVariantBulkCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were created."""
  count: Int!

  """List of the created variants."""
  productVariants: [ProductVariant!]!
  bulkProductErrors: [BulkProductError!]!
}

input ProductVariantBulkCreateInput {
  """List of attributes specific to this variant."""
  attributes: [AttributeValueInput]!

  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal

  """Stock keeping unit."""
  sku: String!

  """
  Determines if the inventory of this variant should be tracked. If false, the
  quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar

  """Stocks of a product available for sale."""
  stocks: [StockInput!]
}

"""Deletes product variants."""
type ProductVariantBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Clears public metadata for product variant."""
type ProductVariantClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""Clears private metadata for product variant."""
type ProductVariantClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductVariantCountableEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new variant for a product."""
type ProductVariantCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  """List of attributes specific to this variant."""
  attributes: [AttributeValueInput]!

  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal

  """Stock keeping unit."""
  sku: String

  """
  Determines if the inventory of this variant should be tracked. If false, the
  quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar

  """Product ID of which type is the variant."""
  product: ID!

  """Stocks of a product available for sale."""
  stocks: [StockInput!]
}

"""Deletes a product variant."""
type ProductVariantDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantInput {
  """List of attributes specific to this variant."""
  attributes: [AttributeValueInput]

  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal

  """Stock keeping unit."""
  sku: String

  """
  Determines if the inventory of this variant should be tracked. If false, the
  quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: WeightScalar
}

"""Creates stocks for product variant."""
type ProductVariantStocksCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated product variant."""
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

"""Delete stocks from product variant."""
type ProductVariantStocksDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated product variant."""
  productVariant: ProductVariant
  stockErrors: [StockError!]!
}

"""Update stocks for product variant."""
type ProductVariantStocksUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated product variant."""
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

type ProductVariantTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated product variant fields for the given language code."""
  translation(
    """A language code to return the translation for product variant."""
    languageCode: LanguageCodeEnum!
  ): ProductVariantTranslation

  """Represents a version of a product such as different size or color."""
  productVariant: ProductVariant
}

"""Creates/Updates translations for Product Variant."""
type ProductVariantTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  productVariant: ProductVariant
}

type ProductVariantTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Translation language."""
  language: LanguageDisplay!
}

"""Updates an existing variant for product."""
type ProductVariantUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""Update public metadata for product variant."""
type ProductVariantUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""Update private metadata for product variant."""
type ProductVariantUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type Query {
  """Look up a webhook by ID."""
  webhook(
    """ID of the webhook."""
    id: ID!
  ): Webhook

  """List of webhooks."""
  webhooks(
    """Sort webhooks."""
    sortBy: WebhookSortingInput

    """Filtering options for webhooks."""
    filter: WebhookFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WebhookCountableConnection @deprecated(reason: "Use webhooks field on app(s) query instead. This field will be removed after 2020-07-31.")

  """List of all available webhook events."""
  webhookEvents: [WebhookEvent]

  """
  Retrieve a sample payload for a given webhook event based on real data. It can
  be useful for some integrations where sample payload is required.
  """
  webhookSamplePayload(
    """Name of the requested event type."""
    eventType: WebhookSampleEventTypeEnum!
  ): JSONString

  """Look up a warehouse by ID."""
  warehouse(
    """ID of an warehouse"""
    id: ID!
  ): Warehouse

  """List of warehouses."""
  warehouses(
    filter: WarehouseFilterInput
    sortBy: WarehouseSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WarehouseCountableConnection

  """Returns a list of all translatable items of a given kind."""
  translations(
    """Kind of objects to retrieve."""
    kind: TranslatableKinds!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TranslatableItemConnection
  translation(
    """ID of the object to retrieve."""
    id: ID!

    """Kind of the object to retrieve."""
    kind: TranslatableKinds!
  ): TranslatableItem

  """Look up a stock by ID"""
  stock(
    """ID of an warehouse"""
    id: ID!
  ): Stock

  """List of stocks."""
  stocks(
    filter: StockFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StockCountableConnection

  """Return information about the shop."""
  shop: Shop!

  """Look up a shipping zone by ID."""
  shippingZone(
    """ID of the shipping zone."""
    id: ID!
  ): ShippingZone

  """List of the shop's shipping zones."""
  shippingZones(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ShippingZoneCountableConnection

  """Look up digital content by ID."""
  digitalContent(
    """ID of the digital content."""
    id: ID!
  ): DigitalContent

  """List of digital content."""
  digitalContents(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DigitalContentCountableConnection

  """List of the shop's attributes."""
  attributes(
    """Filtering options for attributes."""
    filter: AttributeFilterInput

    """Sorting options for attributes."""
    sortBy: AttributeSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AttributeCountableConnection

  """Look up an attribute by ID."""
  attribute(
    """ID of the attribute."""
    id: ID!
  ): Attribute

  """List of the shop's categories."""
  categories(
    """Filtering options for categories."""
    filter: CategoryFilterInput

    """Sort categories."""
    sortBy: CategorySortingInput

    """Filter categories by the nesting level in the category tree."""
    level: Int

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """Look up a category by ID or slug."""
  category(
    """ID of the category."""
    id: ID

    """Slug of the category"""
    slug: String
  ): Category

  """Look up a collection by ID."""
  collection(
    """ID of the collection."""
    id: ID

    """Slug of the category"""
    slug: String
  ): Collection

  """List of the shop's collections."""
  collections(
    """Filtering options for collections."""
    filter: CollectionFilterInput

    """Sort collections."""
    sortBy: CollectionSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """Look up a product by ID."""
  product(
    """ID of the product."""
    id: ID

    """Slug of the category"""
    slug: String
  ): Product

  """List of the shop's products."""
  products(
    """Filtering options for products."""
    filter: ProductFilterInput

    """Sort products."""
    sortBy: ProductOrder

    """
    [Deprecated] Filter products by stock availability. Use the `filter` field
    instead. This field will be removed after 2020-07-31.
    """
    stockAvailability: StockAvailability

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """Look up a product type by ID."""
  productType(
    """ID of the product type."""
    id: ID!
  ): ProductType

  """List of the shop's product types."""
  productTypes(
    """Filtering options for product types."""
    filter: ProductTypeFilterInput

    """Sort product types."""
    sortBy: ProductTypeSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductTypeCountableConnection

  """Look up a product variant by ID."""
  productVariant(
    """ID of the product variant."""
    id: ID!
  ): ProductVariant

  """List of product variants."""
  productVariants(
    """Filter product variants by given IDs."""
    ids: [ID]

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """List of top selling products."""
  reportProductSales(
    """Span of time."""
    period: ReportingPeriod!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """Look up a payment by ID."""
  payment(
    """ID of the payment."""
    id: ID!
  ): Payment

  """List of payments."""
  payments(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PaymentCountableConnection

  """Look up a page by ID or slug."""
  page(
    """ID of the page."""
    id: ID

    """The slug of the page."""
    slug: String
  ): Page

  """List of the shop's pages."""
  pages(
    """Sort pages."""
    sortBy: PageSortingInput

    """Filtering options for pages."""
    filter: PageFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PageCountableConnection

  """
  List of activity events to display on homepage (at the moment it only contains order-events).
  """
  homepageEvents(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderEventCountableConnection

  """Look up an order by ID."""
  order(
    """ID of an order."""
    id: ID!
  ): Order

  """List of orders."""
  orders(
    """Sort orders."""
    sortBy: OrderSortingInput

    """Filtering options for orders."""
    filter: OrderFilterInput

    """
    [Deprecated] Filter orders from a selected timespan. Use the `filter` field
    instead. This field will be removed after 2020-07-31.
    """
    created: ReportingPeriod

    """
    [Deprecated] Filter order by status. Use the `filter` field instead. This field will be removed after 2020-07-31.
    """
    status: OrderStatusFilter

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of draft orders."""
  draftOrders(
    """Sort draft orders."""
    sortBy: OrderSortingInput

    """Filtering options for draft orders."""
    filter: OrderDraftFilterInput

    """
    [Deprecated] Filter draft orders from a selected timespan. Use the `filter`
    field instead. This field will be removed after 2020-07-31.
    """
    created: ReportingPeriod

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """Return the total sales amount from a specific period."""
  ordersTotal(
    """A period of time."""
    period: ReportingPeriod
  ): TaxedMoney

  """Look up an order by token."""
  orderByToken(
    """The order's token."""
    token: UUID!
  ): Order

  """Look up a navigation menu by ID or name."""
  menu(
    """ID of the menu."""
    id: ID

    """The menu's name."""
    name: String
  ): Menu

  """List of the storefront's menus."""
  menus(
    """Sort menus."""
    sortBy: MenuSortingInput

    """Filtering options for menus."""
    filter: MenuFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MenuCountableConnection

  """Look up a menu item by ID."""
  menuItem(
    """ID of the menu item."""
    id: ID!
  ): MenuItem

  """List of the storefronts's menu items."""
  menuItems(
    """Sort menus items."""
    sortBy: MenuItemSortingInput

    """Filtering options for menu items."""
    filter: MenuItemFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): MenuItemCountableConnection

  """Look up a gift card by ID."""
  giftCard(
    """ID of the gift card."""
    id: ID!
  ): GiftCard

  """List of gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """Look up a plugin by ID."""
  plugin(
    """ID of the plugin."""
    id: ID!
  ): Plugin

  """List of plugins."""
  plugins(
    """Filtering options for plugins."""
    filter: PluginFilterInput

    """Sort plugins."""
    sortBy: PluginSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PluginCountableConnection

  """Look up a sale by ID."""
  sale(
    """ID of the sale."""
    id: ID!
  ): Sale

  """List of the shop's sales."""
  sales(
    """Filtering options for sales."""
    filter: SaleFilterInput

    """Sort sales."""
    sortBy: SaleSortingInput

    """Search sales by name, value or type."""
    query: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): SaleCountableConnection

  """Look up a voucher by ID."""
  voucher(
    """ID of the voucher."""
    id: ID!
  ): Voucher

  """List of the shop's vouchers."""
  vouchers(
    """Filtering options for vouchers."""
    filter: VoucherFilterInput

    """Sort voucher."""
    sortBy: VoucherSortingInput

    """Search vouchers by name or code."""
    query: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): VoucherCountableConnection

  """List of all tax rates available from tax gateway."""
  taxTypes: [TaxType]

  """Look up a checkout by token."""
  checkout(
    """The checkout's token."""
    token: UUID
  ): Checkout

  """List of checkouts."""
  checkouts(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutCountableConnection

  """Look up a checkout line by ID."""
  checkoutLine(
    """ID of the checkout line."""
    id: ID
  ): CheckoutLine

  """List of checkout lines."""
  checkoutLines(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutLineCountableConnection

  """List of the apps."""
  apps(
    """Filtering options for apps."""
    filter: AppFilterInput

    """Sort apps."""
    sortBy: AppSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): AppCountableConnection

  """Look up a app by ID."""
  app(
    """ID of the app."""
    id: ID!
  ): App

  """Returns address validation rules."""
  addressValidationRules(
    """Two-letter ISO 3166-1 country code."""
    countryCode: CountryCode!

    """Designation of a region, province or state."""
    countryArea: String

    """City or a town name."""
    city: String

    """Sublocality like a district."""
    cityArea: String
  ): AddressValidationData

  """Look up an address by ID."""
  address(
    """ID of an address."""
    id: ID!
  ): Address

  """List of the shop's customers."""
  customers(
    """Filtering options for customers."""
    filter: CustomerFilterInput

    """Sort customers."""
    sortBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserCountableConnection

  """List of permission groups."""
  permissionGroups(
    """Filtering options for permission groups."""
    filter: PermissionGroupFilterInput

    """Sort permission groups."""
    sortBy: PermissionGroupSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GroupCountableConnection

  """Look up permission group by ID."""
  permissionGroup(
    """ID of the group."""
    id: ID!
  ): Group

  """Return the currently authenticated user."""
  me: User

  """List of the shop's staff users."""
  staffUsers(
    """Filtering options for staff users."""
    filter: StaffUserInput

    """Sort staff users."""
    sortBy: UserSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): UserCountableConnection

  """List of the service accounts."""
  serviceAccounts(
    """Filtering options for service accounts."""
    filter: ServiceAccountFilterInput

    """Sort service accounts."""
    sortBy: ServiceAccountSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ServiceAccountCountableConnection @deprecated(reason: "Use the `apps` query instead. This field will be removed after 2020-07-31.")

  """Look up a service account by ID."""
  serviceAccount(
    """ID of the service account."""
    id: ID!
  ): ServiceAccount @deprecated(reason: "Use the `app` query instead. This field will be removed after 2020-07-31.")

  """Look up a user by ID."""
  user(
    """ID of the user."""
    id: ID!
  ): User
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

"""Represents a reduced VAT rate for a particular type of goods."""
type ReducedRate {
  """Reduced VAT rate in percent."""
  rate: Float!

  """A type of goods."""
  rateType: TaxRateType!
}

"""
Mutation that refresh user token.

It overrides the default graphql_jwt.Refresh to update user's last_login field.
"""
type RefreshToken {
  token: String
  payload: GenericScalar
}

input ReorderInput {
  """The ID of the item to move."""
  id: ID!

  """The new relative sorting position of the item (from -inf to +inf)."""
  sortOrder: Int
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

"""Request email change of the logged in user."""
type RequestEmailChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A user instance."""
  user: User
  accountErrors: [AccountError!]!
}

"""Sends an email with the account password modification link."""
type RequestPasswordReset {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

"""
Sales allow creating discounts for categories, collections or products and are visible to all the customers.
"""
type Sale implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  type: SaleType!
  value: Float!
  startDate: DateTime!
  endDate: DateTime

  """List of categories this sale applies to."""
  categories(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """List of collections this sale applies to."""
  collections(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """List of products this sale applies to."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """Returns translated sale fields for the given language code."""
  translation(
    """A language code to return the translation for sale."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslation
}

"""Adds products, categories, collections to a voucher."""
type SaleAddCatalogues {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Sale of which catalogue IDs will be modified."""
  sale: Sale
  discountErrors: [DiscountError!]!
}

"""Deletes sales."""
type SaleBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  discountErrors: [DiscountError!]!
}

type SaleCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type SaleCountableEdge {
  """The item at the end of the edge."""
  node: Sale!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new sale."""
type SaleCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  sale: Sale
}

"""Deletes a sale."""
type SaleDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  sale: Sale
}

input SaleFilterInput {
  status: [DiscountStatusEnum]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
}

input SaleInput {
  """Voucher name."""
  name: String

  """Fixed or percentage."""
  type: DiscountValueTypeEnum

  """Value of the voucher."""
  value: Decimal

  """Products related to the discount."""
  products: [ID]

  """Categories related to the discount."""
  categories: [ID]

  """Collections related to the discount."""
  collections: [ID]

  """Start date of the voucher in ISO 8601 format."""
  startDate: DateTime

  """End date of the voucher in ISO 8601 format."""
  endDate: DateTime
}

"""Removes products, categories, collections from a sale."""
type SaleRemoveCatalogues {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Sale of which catalogue IDs will be modified."""
  sale: Sale
  discountErrors: [DiscountError!]!
}

enum SaleSortField {
  """Sort sales by name."""
  NAME

  """Sort sales by start date."""
  START_DATE

  """Sort sales by end date."""
  END_DATE

  """Sort sales by value."""
  VALUE

  """Sort sales by type."""
  TYPE
}

input SaleSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort sales by the selected field."""
  field: SaleSortField!
}

type SaleTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated sale fields for the given language code."""
  translation(
    """A language code to return the translation for sale."""
    languageCode: LanguageCodeEnum!
  ): SaleTranslation

  """
  Sales allow creating discounts for categories, collections or products and are visible to all the customers.
  """
  sale: Sale
}

"""Creates/updates translations for a sale."""
type SaleTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  sale: Sale
}

type SaleTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String

  """Translation language."""
  language: LanguageDisplay!
}

"""An enumeration."""
enum SaleType {
  """BTN"""
  FIXED

  """%"""
  PERCENTAGE
}

"""Updates a sale."""
type SaleUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  sale: Sale
}

"""Represents a custom attribute."""
type SelectedAttribute {
  """Name of an attribute displayed in the interface."""
  attribute: Attribute!

  """Values of an attribute."""
  values: [AttributeValue]!
}

input SeoInput {
  """SEO title."""
  title: String

  """SEO description."""
  description: String
}

"""Represents service account data."""
type ServiceAccount implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """Name of the service account."""
  name: String

  """The date and time when the service account was created."""
  created: DateTime

  """Determine if service account will be set active or not."""
  isActive: Boolean

  """List of the service's permissions."""
  permissions: [Permission]

  """Last 4 characters of the tokens."""
  tokens: [ServiceAccountToken]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

"""Clear private metadata for a service account."""
type ServiceAccountClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceAccountCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ServiceAccountCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ServiceAccountCountableEdge {
  """The item at the end of the edge."""
  node: ServiceAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new service account."""
type ServiceAccountCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The newly created authentication token."""
  authToken: String
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

"""Deletes a service account."""
type ServiceAccountDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

input ServiceAccountFilterInput {
  search: String
  isActive: Boolean
}

input ServiceAccountInput {
  """Name of the service account."""
  name: String

  """Determine if this service account should be enabled."""
  isActive: Boolean

  """List of permission code names to assign to this service account."""
  permissions: [PermissionEnum]
}

enum ServiceAccountSortField {
  """Sort service accounts by name."""
  NAME

  """Sort service accounts by creation date."""
  CREATION_DATE
}

input ServiceAccountSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort service accounts by the selected field."""
  field: ServiceAccountSortField!
}

"""Represents token data."""
type ServiceAccountToken implements Node {
  """Name of the authenticated token."""
  name: String

  """Last 4 characters of the token."""
  authToken: String

  """The ID of the object."""
  id: ID!
}

"""Creates a new token."""
type ServiceAccountTokenCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """The newly created authentication token."""
  authToken: String
  accountErrors: [AccountError!]!
  serviceAccountToken: ServiceAccountToken
}

"""Deletes an authentication token assigned to service account."""
type ServiceAccountTokenDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccountToken: ServiceAccountToken
}

input ServiceAccountTokenInput {
  """Name of the token."""
  name: String

  """ID of service account."""
  serviceAccount: ID!
}

"""Updates an existing service account."""
type ServiceAccountUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

"""Updates private metadata for a service account."""
type ServiceAccountUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

"""
Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
"""
type SetPassword {
  token: String
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """List of errors that occurred executing the mutation."""
  accountErrors: [AccountError!]!

  """A user instance."""
  user: User
}

type ShippingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShippingErrorCode!

  """List of warehouse IDs which causes the error."""
  warehouses: [ID!]
}

"""An enumeration."""
enum ShippingErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  MAX_LESS_THAN_MIN
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

"""
Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers.
"""
type ShippingMethod implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  price: Money
  minimumOrderPrice: Money
  maximumOrderPrice: Money
  minimumOrderWeight: Weight
  maximumOrderWeight: Weight

  """Type of the shipping method."""
  type: ShippingMethodTypeEnum

  """Returns translated shipping method fields for the given language code."""
  translation(
    """A language code to return the translation for shipping method."""
    languageCode: LanguageCodeEnum!
  ): ShippingMethodTranslation
}

type ShippingMethodTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String!

  """Returns translated shipping method fields for the given language code."""
  translation(
    """A language code to return the translation for shipping method."""
    languageCode: LanguageCodeEnum!
  ): ShippingMethodTranslation

  """
  Shipping method are the methods you'll use to get customer's orders  to them. They are directly exposed to the customers.
  """
  shippingMethod: ShippingMethod
}

type ShippingMethodTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String

  """Translation language."""
  language: LanguageDisplay!
}

"""An enumeration."""
enum ShippingMethodTypeEnum {
  PRICE
  WEIGHT
}

"""Deletes shipping prices."""
type ShippingPriceBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  shippingErrors: [ShippingError!]!
}

"""Creates a new shipping price."""
type ShippingPriceCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

"""Deletes a shipping price."""
type ShippingPriceDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A shipping method to delete."""
  shippingMethod: ShippingMethod

  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingPriceInput {
  """Name of the shipping method."""
  name: String

  """Shipping price of the shipping method."""
  price: Decimal

  """Minimum order price to use this shipping method."""
  minimumOrderPrice: Decimal

  """Maximum order price to use this shipping method."""
  maximumOrderPrice: Decimal

  """Minimum order weight to use this shipping method."""
  minimumOrderWeight: WeightScalar

  """Maximum order weight to use this shipping method."""
  maximumOrderWeight: WeightScalar

  """Shipping type: price or weight based."""
  type: ShippingMethodTypeEnum

  """Shipping zone this method belongs to."""
  shippingZone: ID
}

"""Creates/Updates translations for shipping method."""
type ShippingPriceTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  shippingMethod: ShippingMethod
}

"""Updates a new shipping price."""
type ShippingPriceUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """A shipping zone to which the shipping method belongs."""
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

"""
Represents a shipping zone in the shop. Zones are the concept used only for
grouping shipping methods in the dashboard, and are never exposed to the
customers directly.
"""
type ShippingZone implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  default: Boolean!

  """Lowest and highest prices for the shipping."""
  priceRange: MoneyRange

  """List of countries available for the method."""
  countries: [CountryDisplay]

  """
  List of shipping methods available for orders shipped to countries within this shipping zone.
  """
  shippingMethods: [ShippingMethod]

  """List of warehouses for shipping zone."""
  warehouses: [Warehouse]
}

"""Deletes shipping zones."""
type ShippingZoneBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  shippingErrors: [ShippingError!]!
}

type ShippingZoneCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ShippingZoneCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ShippingZoneCountableEdge {
  """The item at the end of the edge."""
  node: ShippingZone!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new shipping zone."""
type ShippingZoneCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingZoneCreateInput {
  """Shipping zone's name. Visible only to the staff."""
  name: String

  """List of countries in this shipping zone."""
  countries: [String]

  """
  Default shipping zone will be used for countries not covered by other zones.
  """
  default: Boolean

  """List of warehouses to assign to a shipping zone"""
  addWarehouses: [ID]
}

"""Deletes a shipping zone."""
type ShippingZoneDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

"""Updates a new shipping zone."""
type ShippingZoneUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingZoneUpdateInput {
  """Shipping zone's name. Visible only to the staff."""
  name: String

  """List of countries in this shipping zone."""
  countries: [String]

  """
  Default shipping zone will be used for countries not covered by other zones.
  """
  default: Boolean

  """List of warehouses to assign to a shipping zone"""
  addWarehouses: [ID]

  """List of warehouses to unassign from a shipping zone"""
  removeWarehouses: [ID]
}

"""
Represents a shop resource containing general shop data and configuration.
"""
type Shop {
  """List of available payment gateways."""
  availablePaymentGateways: [PaymentGateway!]!

  """Customer's geolocalization data."""
  geolocalization: Geolocalization

  """
  List of configured authorization keys. Authorization keys are used to enable
  third-party OAuth authorization (currently Facebook or Google).
  """
  authorizationKeys: [AuthorizationKey]!

  """List of countries available in the shop."""
  countries(
    """A language code to return the translation for."""
    languageCode: LanguageCodeEnum
  ): [CountryDisplay!]!

  """List of available currencies."""
  currencies: [String]!

  """Shop's default currency."""
  defaultCurrency: String!

  """Shop's default country."""
  defaultCountry: CountryDisplay

  """Default shop's email sender's name."""
  defaultMailSenderName: String

  """Default shop's email sender's address."""
  defaultMailSenderAddress: String

  """Shop's description."""
  description: String

  """Shop's domain data."""
  domain: Domain!

  """Collection displayed on homepage."""
  homepageCollection: Collection

  """List of the shops's supported languages."""
  languages: [LanguageDisplay]!

  """Shop's name."""
  name: String!

  """Shop's navigation."""
  navigation: Navigation

  """List of available permissions."""
  permissions: [Permission]!

  """List of possible phone prefixes."""
  phonePrefixes: [String]!

  """Header text."""
  headerText: String

  """Include taxes in prices."""
  includeTaxesInPrices: Boolean!

  """Display prices with tax in store."""
  displayGrossPrices: Boolean!

  """Charge taxes on shipping."""
  chargeTaxesOnShipping: Boolean!

  """Enable inventory tracking."""
  trackInventoryByDefault: Boolean

  """Default weight unit."""
  defaultWeightUnit: WeightUnitsEnum

  """Returns translated shop fields for the given language code."""
  translation(
    """A language code to return the translation for shop."""
    languageCode: LanguageCodeEnum!
  ): ShopTranslation

  """Enable automatic fulfillment for all digital products."""
  automaticFulfillmentDigitalProducts: Boolean

  """Default number of max downloads per digital content URL."""
  defaultDigitalMaxDownloads: Int

  """Default number of days which digital content URL will be valid."""
  defaultDigitalUrlValidDays: Int

  """Company address."""
  companyAddress: Address

  """URL of a view where customers can set their password."""
  customerSetPasswordUrl: String

  """List of staff notification recipients."""
  staffNotificationRecipients: [StaffNotificationRecipient]
}

"""
Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
"""
type ShopAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

"""Updates site domain of the shop."""
type ShopDomainUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShopErrorCode!
}

"""An enumeration."""
enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Fetch tax rates."""
type ShopFetchTaxRates {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

input ShopSettingsInput {
  """Header text."""
  headerText: String

  """SEO description."""
  description: String

  """Include taxes in prices."""
  includeTaxesInPrices: Boolean

  """Display prices with tax in store."""
  displayGrossPrices: Boolean

  """Charge taxes on shipping."""
  chargeTaxesOnShipping: Boolean

  """Enable inventory tracking."""
  trackInventoryByDefault: Boolean

  """Default weight unit."""
  defaultWeightUnit: WeightUnitsEnum

  """Enable automatic fulfillment for all digital products."""
  automaticFulfillmentDigitalProducts: Boolean

  """Default number of max downloads per digital content URL."""
  defaultDigitalMaxDownloads: Int

  """Default number of days which digital content URL will be valid."""
  defaultDigitalUrlValidDays: Int

  """Default email sender's name."""
  defaultMailSenderName: String

  """Default email sender's address."""
  defaultMailSenderAddress: String

  """URL of a view where customers can set their password."""
  customerSetPasswordUrl: String
}

"""Creates/Updates translations for Shop Settings."""
type ShopSettingsTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  translationErrors: [TranslationError!]!
}

input ShopSettingsTranslationInput {
  headerText: String
  description: String
}

"""Updates shop settings."""
type ShopSettingsUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Updated shop."""
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopTranslation implements Node {
  """The ID of the object."""
  id: ID!
  headerText: String!
  description: String!

  """Translation language."""
  language: LanguageDisplay!
}

input SiteDomainInput {
  """Domain name for shop."""
  domain: String

  """Shop site name."""
  name: String
}

"""Deletes staff users."""
type StaffBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  staffErrors: [StaffError!]!
}

"""Creates a new staff user."""
type StaffCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

input StaffCreateInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """List of permission group IDs to which user should be assigned."""
  addGroups: [ID!]

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String
}

"""Deletes a staff user."""
type StaffDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

type StaffError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!

  """List of permissions which causes the error."""
  permissions: [PermissionEnum!]

  """List of permission group IDs which cause the error."""
  groups: [ID!]

  """List of user IDs which causes the error."""
  users: [ID!]
}

enum StaffMemberStatus {
  ACTIVE
  DEACTIVATED
}

"""
Represents a recipient of email notifications send by Saleor, such as
notifications about new orders. Notifications can be assigned to staff users or
arbitrary email addresses.
"""
type StaffNotificationRecipient implements Node {
  """Returns a user subscribed to email notifications."""
  user: User

  """Determines if a notification active."""
  active: Boolean

  """The ID of the object."""
  id: ID!

  """Returns email address of a user subscribed to email notifications."""
  email: String
}

"""Creates a new staff notification recipient."""
type StaffNotificationRecipientCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

"""Delete staff notification recipient."""
type StaffNotificationRecipientDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

input StaffNotificationRecipientInput {
  """The ID of the user subscribed to email notifications.."""
  user: ID

  """Email address of a user subscribed to email notifications."""
  email: String

  """Determines if a notification active."""
  active: Boolean
}

"""Updates a staff notification recipient."""
type StaffNotificationRecipientUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

"""Updates an existing staff user."""
type StaffUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

input StaffUpdateInput {
  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """List of permission group IDs to which user should be assigned."""
  addGroups: [ID!]

  """List of permission group IDs from which user should be unassigned."""
  removeGroups: [ID!]
}

input StaffUserInput {
  status: StaffMemberStatus
  search: String
}

"""Represents stock."""
type Stock implements Node {
  warehouse: Warehouse!
  productVariant: ProductVariant!

  """
  Quantity of a product in the warehouse's possession, including the allocated stock that is waiting for shipment.
  """
  quantity: Int!

  """The ID of the object."""
  id: ID!

  """Quantity allocated for orders"""
  quantityAllocated: Int!
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

type StockCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StockCountableEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

type StockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: StockErrorCode!
}

"""An enumeration."""
enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input StockFilterInput {
  quantity: Float
  search: String
}

input StockInput {
  """Warehouse in which stock is located."""
  warehouse: ID!

  """Quantity of items available for sell."""
  quantity: Int
}

"""
Represents a monetary value with taxes. In cases where taxes were not applied, net and gross values will be equal.
"""
type TaxedMoney {
  """Currency code."""
  currency: String!

  """Amount of money including taxes."""
  gross: Money!

  """Amount of money without taxes."""
  net: Money!

  """Amount of taxes."""
  tax: Money!
}

"""Represents a range of monetary values."""
type TaxedMoneyRange {
  """Lower bound of a price range."""
  start: TaxedMoney

  """Upper bound of a price range."""
  stop: TaxedMoney
}

"""An enumeration."""
enum TaxRateType {
  ACCOMMODATION
  ADMISSION_TO_CULTURAL_EVENTS
  ADMISSION_TO_ENTERTAINMENT_EVENTS
  ADMISSION_TO_SPORTING_EVENTS
  ADVERTISING
  AGRICULTURAL_SUPPLIES
  BABY_FOODSTUFFS
  BIKES
  BOOKS
  CHILDRENS_CLOTHING
  DOMESTIC_FUEL
  DOMESTIC_SERVICES
  E_BOOKS
  FOODSTUFFS
  HOTELS
  MEDICAL
  NEWSPAPERS
  PASSENGER_TRANSPORT
  PHARMACEUTICALS
  PROPERTY_RENOVATIONS
  RESTAURANTS
  SOCIAL_HOUSING
  STANDARD
  WATER
  WINE
}

"""Representation of tax types fetched from tax gateway."""
type TaxType {
  """Description of the tax type."""
  description: String

  """External tax code used to identify given tax group."""
  taxCode: String
}

"""An object representing a single payment."""
type Transaction implements Node {
  """The ID of the object."""
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: TransactionError
  gatewayResponse: JSONString!

  """Total amount of the transaction."""
  amount: Money
}

"""An enumeration."""
enum TransactionError {
  """incorrect_number"""
  TRANSACTIONERROR_INCORRECT_NUMBER

  """invalid_number"""
  TRANSACTIONERROR_INVALID_NUMBER

  """incorrect_cvv"""
  TRANSACTIONERROR_INCORRECT_CVV

  """invalid_cvv"""
  TRANSACTIONERROR_INVALID_CVV

  """incorrect_zip"""
  TRANSACTIONERROR_INCORRECT_ZIP

  """incorrect_address"""
  TRANSACTIONERROR_INCORRECT_ADDRESS

  """invalid_expiry_date"""
  TRANSACTIONERROR_INVALID_EXPIRY_DATE

  """expired"""
  TRANSACTIONERROR_EXPIRED

  """processing_error"""
  TRANSACTIONERROR_PROCESSING_ERROR

  """declined"""
  TRANSACTIONERROR_DECLINED
}

"""An enumeration."""
enum TransactionKind {
  """Authorization"""
  AUTH

  """Refund"""
  REFUND

  """Capture"""
  CAPTURE

  """Void"""
  VOID

  """Confirm"""
  CONFIRM
}

union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent

type TranslatableItemConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TranslatableItemEdge {
  """The item at the end of the edge."""
  node: TranslatableItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TranslatableKinds {
  ATTRIBUTE
  ATTRIBUTE_VALUE
  CATEGORY
  COLLECTION
  MENU_ITEM
  PAGE
  PRODUCT
  SALE
  SHIPPING_METHOD
  VARIANT
  VOUCHER
}

type TranslationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: TranslationErrorCode!
}

"""An enumeration."""
enum TranslationErrorCode {
  GRAPHQL_ERROR
  NOT_FOUND
  REQUIRED
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
}

"""Updates metadata of an object."""
type UpdateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""Updates private metadata of an object."""
type UpdatePrivateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Variables of this type must be set to null in mutations. They will be replaced
with a filename from a following multipart part containing a binary file. See:
https://github.com/jaydenseric/graphql-multipart-request-spec.
"""
scalar Upload

"""Represents user data."""
type User implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  lastLogin: DateTime
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!

  """A note about the customer."""
  note: String
  dateJoined: DateTime!
  defaultShippingAddress: Address
  defaultBillingAddress: Address

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of privately stored metadata namespaces."""
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")

  """List of publicly stored metadata namespaces."""
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")

  """List of all user's addresses."""
  addresses: [Address]

  """Returns the last open checkout of this user."""
  checkout: Checkout

  """List of the user gift cards."""
  giftCards(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GiftCardCountableConnection

  """List of user's orders."""
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """List of user's permissions."""
  permissions: [Permission] @deprecated(reason: "Will be removed in Saleor 2.11.Use the `userPermissions` instead.")

  """List of user's permissions."""
  userPermissions: [UserPermission]

  """List of user's permission groups."""
  permissionGroups: [Group]

  """List of user's permission groups which user can manage."""
  editableGroups: [Group]
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image

  """List of events associated with the user."""
  events: [CustomerEvent]

  """List of stored payment sources."""
  storedPaymentSources: [PaymentSource]
}

"""Deletes a user avatar. Only for staff members."""
type UserAvatarDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]!
}

"""
Create a user avatar. Only for staff members. This mutation must be sent as a
`multipart` request. More detailed specs of the upload format can be found here:
https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type UserAvatarUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """An updated user instance."""
  user: User
  accountErrors: [AccountError!]!
}

"""Activate or deactivate users."""
type UserBulkSetActive {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  accountErrors: [AccountError!]!
}

"""Clear metadata for user."""
type UserClearMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""Clear private metadata for user."""
type UserClearPrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type UserCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type UserCountableEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserCreateInput {
  """Billing address of the customer."""
  defaultBillingAddress: AddressInput

  """Shipping address of the customer."""
  defaultShippingAddress: AddressInput

  """Given name."""
  firstName: String

  """Family name."""
  lastName: String

  """The unique email address of the user."""
  email: String

  """User account is active."""
  isActive: Boolean

  """A note about the user."""
  note: String

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String
}

type UserPermission {
  """Internal code for permission."""
  code: PermissionEnum!

  """Describe action(s) allowed to do by permission."""
  name: String!

  """List of user permission groups which contains this permission."""
  sourcePermissionGroups(
    """ID of user whose groups should be returned."""
    userId: ID!
  ): [Group!]
}

enum UserSortField {
  """Sort users by first name."""
  FIRST_NAME

  """Sort users by last name."""
  LAST_NAME

  """Sort users by email."""
  EMAIL

  """Sort users by order count."""
  ORDER_COUNT
}

input UserSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort users by the selected field."""
  field: UserSortField!
}

"""Updates metadata for user."""
type UserUpdateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""Updates private metadata for user."""
type UserUpdatePrivateMeta {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""Assign an image to a product variant."""
type VariantImageAssign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Unassign an image from a product variant."""
type VariantImageUnassign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Represents availability of a variant in the storefront."""
type VariantPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The price, with any discount subtracted."""
  price: TaxedMoney

  """The price without any discount."""
  priceUndiscounted: TaxedMoney

  """The discounted price in the local currency."""
  priceLocalCurrency: TaxedMoney
}

"""Represents a VAT rate for a country."""
type VAT {
  """Country code."""
  countryCode: String!

  """Standard VAT rate in percent."""
  standardRate: Float

  """Country's VAT rate exceptions for specific types of goods."""
  reducedRates: [ReducedRate]!
}

"""Mutation that confirms if token is valid and also returns user data."""
type VerifyToken {
  payload: GenericScalar
  user: User
}

"""
Vouchers allow giving discounts to particular customers on categories,
collections or specific products. They can be used during checkout by providing
valid voucher codes.
"""
type Voucher implements Node {
  """The ID of the object."""
  id: ID!
  name: String

  """Determines a type of voucher."""
  type: VoucherTypeEnum!
  code: String!
  usageLimit: Int
  used: Int!
  startDate: DateTime!
  endDate: DateTime
  applyOncePerOrder: Boolean!
  applyOncePerCustomer: Boolean!

  """Determines a type of discount for voucher - value or percentage"""
  discountValueType: DiscountValueTypeEnum!
  discountValue: Float!
  minSpent: Money
  minCheckoutItemsQuantity: Int

  """List of categories this voucher applies to."""
  categories(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """List of collections this voucher applies to."""
  collections(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """List of products this voucher applies to."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """List of countries available for the shipping voucher."""
  countries: [CountryDisplay]

  """Returns translated voucher fields for the given language code."""
  translation(
    """A language code to return the translation for voucher."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslation
}

"""Adds products, categories, collections to a voucher."""
type VoucherAddCatalogues {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Voucher of which catalogue IDs will be modified."""
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

"""Deletes vouchers."""
type VoucherBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Returns how many objects were affected."""
  count: Int!
  discountErrors: [DiscountError!]!
}

type VoucherCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type VoucherCountableEdge {
  """The item at the end of the edge."""
  node: Voucher!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new voucher."""
type VoucherCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""Deletes a voucher."""
type VoucherDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
}

input VoucherFilterInput {
  status: [DiscountStatusEnum]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType]
  started: DateTimeRangeInput
  search: String
}

input VoucherInput {
  """Voucher type: PRODUCT, CATEGORY SHIPPING or ENTIRE_ORDER."""
  type: VoucherTypeEnum

  """Voucher name."""
  name: String

  """Code to use the voucher."""
  code: String

  """Start date of the voucher in ISO 8601 format."""
  startDate: DateTime

  """End date of the voucher in ISO 8601 format."""
  endDate: DateTime

  """Choices: fixed or percentage."""
  discountValueType: DiscountValueTypeEnum

  """Value of the voucher."""
  discountValue: Decimal

  """Products discounted by the voucher."""
  products: [ID]

  """Collections discounted by the voucher."""
  collections: [ID]

  """Categories discounted by the voucher."""
  categories: [ID]

  """Min purchase amount required to apply the voucher."""
  minAmountSpent: Decimal

  """Minimal quantity of checkout items required to apply the voucher."""
  minCheckoutItemsQuantity: Int

  """Country codes that can be used with the shipping voucher."""
  countries: [String]

  """Voucher should be applied to the cheapest item or entire order."""
  applyOncePerOrder: Boolean

  """Voucher should be applied once per customer."""
  applyOncePerCustomer: Boolean

  """Limit number of times this voucher can be used in total."""
  usageLimit: Int
}

"""Removes products, categories, collections from a voucher."""
type VoucherRemoveCatalogues {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")

  """Voucher of which catalogue IDs will be modified."""
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

enum VoucherSortField {
  """Sort vouchers by code."""
  CODE

  """Sort vouchers by start date."""
  START_DATE

  """Sort vouchers by end date."""
  END_DATE

  """Sort vouchers by value."""
  VALUE

  """Sort vouchers by type."""
  TYPE

  """Sort vouchers by usage limit."""
  USAGE_LIMIT

  """Sort vouchers by minimum spent amount."""
  MINIMUM_SPENT_AMOUNT
}

input VoucherSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort vouchers by the selected field."""
  field: VoucherSortField!
}

type VoucherTranslatableContent implements Node {
  """The ID of the object."""
  id: ID!
  name: String

  """Returns translated voucher fields for the given language code."""
  translation(
    """A language code to return the translation for voucher."""
    languageCode: LanguageCodeEnum!
  ): VoucherTranslation

  """
  Vouchers allow giving discounts to particular customers on categories,
  collections or specific products. They can be used during checkout by
  providing valid voucher codes.
  """
  voucher: Voucher
}

"""Creates/Updates translations for Voucher."""
type VoucherTranslate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  voucher: Voucher
}

type VoucherTranslation implements Node {
  """The ID of the object."""
  id: ID!
  name: String

  """Translation language."""
  language: LanguageDisplay!
}

enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
}

"""Updates a voucher."""
type VoucherUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""Represents warehouse."""
type Warehouse implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  slug: String!
  companyName: String!
  shippingZones(before: String, after: String, first: Int, last: Int): ShippingZoneCountableConnection!
  address: Address!
  email: String!
}

input WarehouseAddressInput {
  """Address."""
  streetAddress1: String!

  """Address."""
  streetAddress2: String

  """City."""
  city: String!

  """District."""
  cityArea: String

  """Postal code."""
  postalCode: String

  """Country."""
  country: CountryCode!

  """State or province."""
  countryArea: String

  """Phone number."""
  phone: String
}

type WarehouseCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WarehouseCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WarehouseCountableEdge {
  """The item at the end of the edge."""
  node: Warehouse!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new warehouse."""
type WarehouseCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseCreateInput {
  """Warehouse slug."""
  slug: String

  """Company name."""
  companyName: String

  """The email address of the warehouse."""
  email: String

  """Warehouse name."""
  name: String!

  """Address of the warehouse."""
  address: WarehouseAddressInput!

  """Shipping zones supported by the warehouse."""
  shippingZones: [ID]
}

"""Deletes selected warehouse."""
type WarehouseDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WarehouseErrorCode!
}

"""An enumeration."""
enum WarehouseErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WarehouseFilterInput {
  search: String
  ids: [ID]
}

"""Add shipping zone to given warehouse."""
type WarehouseShippingZoneAssign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouse: Warehouse
  warehouseErrors: [WarehouseError!]!
}

"""Remove shipping zone from given warehouse."""
type WarehouseShippingZoneUnassign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouse: Warehouse
  warehouseErrors: [WarehouseError!]!
}

enum WarehouseSortField {
  """Sort warehouses by name."""
  NAME
}

input WarehouseSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort warehouses by the selected field."""
  field: WarehouseSortField!
}

"""Updates given warehouse."""
type WarehouseUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseUpdateInput {
  """Warehouse slug."""
  slug: String

  """Company name."""
  companyName: String

  """The email address of the warehouse."""
  email: String

  """Warehouse name."""
  name: String

  """Address of the warehouse."""
  address: WarehouseAddressInput
}

"""Webhook."""
type Webhook implements Node {
  name: String!
  targetUrl: String!
  isActive: Boolean!
  secretKey: String

  """The ID of the object."""
  id: ID!

  """List of webhook events."""
  events: [WebhookEvent!]!
  serviceAccount: ServiceAccount! @deprecated(reason: "Use the `app` field instead. This field will be removed after 2020-07-31.")
  app: App!
}

type WebhookCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WebhookCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WebhookCountableEdge {
  """The item at the end of the edge."""
  node: Webhook!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new webhook subscription."""
type WebhookCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

input WebhookCreateInput {
  """The name of the webhook."""
  name: String

  """The url to receive the payload."""
  targetUrl: String

  """The events that webhook wants to subscribe."""
  events: [WebhookEventTypeEnum]

  """
  DEPRECATED: Use the `app` field instead. This field will be removed after 2020-07-31.
  """
  serviceAccount: ID

  """ID of the app to which webhook belongs."""
  app: ID

  """Determine if webhook will be set active or not."""
  isActive: Boolean

  """The secret key used to create a hash signature with each payload."""
  secretKey: String
}

"""Deletes a webhook subscription."""
type WebhookDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhook: Webhook
  webhookErrors: [WebhookError!]!
}

type WebhookError {
  """
  Name of a field that caused the error. A value of `null` indicates that the
  error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WebhookErrorCode!
}

"""An enumeration."""
enum WebhookErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Webhook event."""
type WebhookEvent {
  """Internal name of the event type."""
  eventType: WebhookEventTypeEnum!

  """Display name of the event."""
  name: String!
}

"""An enumeration."""
enum WebhookEventTypeEnum {
  ANY_EVENTS
  ORDER_CREATED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_FULFILLED
  CUSTOMER_CREATED
  PRODUCT_CREATED
  CHECKOUT_QUANTITY_CHANGED
  FULFILLMENT_CREATED
}

input WebhookFilterInput {
  search: String
  isActive: Boolean
}

"""An enumeration."""
enum WebhookSampleEventTypeEnum {
  ORDER_CREATED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_FULFILLED
  CUSTOMER_CREATED
  PRODUCT_CREATED
  CHECKOUT_QUANTITY_CHANGED
  FULFILLMENT_CREATED
}

enum WebhookSortField {
  """Sort webhooks by name."""
  NAME

  """Sort webhooks by service account."""
  SERVICE_ACCOUNT

  """Sort webhooks by target url."""
  TARGET_URL

  """Sort webhooks by service account."""
  APP
}

input WebhookSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort webhooks by the selected field."""
  field: WebhookSortField!
}

"""Updates a webhook subscription."""
type WebhookUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhook: Webhook
  webhookErrors: [WebhookError!]!
}

input WebhookUpdateInput {
  """The new name of the webhook."""
  name: String

  """The url to receive the payload."""
  targetUrl: String

  """The events that webhook wants to subscribe."""
  events: [WebhookEventTypeEnum]

  """
  DEPRECATED: Use the `app` field instead. This field will be removed after 2020-07-31.
  """
  serviceAccount: ID

  """ID of the app to which webhook belongs."""
  app: ID

  """Determine if webhook will be set active or not."""
  isActive: Boolean

  """Use to create a hash signature with each payload."""
  secretKey: String
}

"""Represents weight value in a specific weight unit."""
type Weight {
  """Weight unit."""
  unit: String!

  """Weight value."""
  value: Float!
}

scalar WeightScalar

"""An enumeration."""
enum WeightUnitsEnum {
  KG
  LB
  OZ
  G
}

